// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nV7sRTPBx6ecWzFNNAWeQg
// Component: bBYHCE6CYA

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Heading } from "@chakra-ui/react"; // plasmic-import: 0G7l8BbhtHSG-/codeComponent
import { FormLayoutWithCards } from "../../custom/chakraPro/Application/Form Layouts/FormLayoutWithCards"; // plasmic-import: eB7yeGta6hq/codeComponent
import { FormWithInlineLabels } from "../../custom/chakraPro/FormWithInlineLabels"; // plasmic-import: L0P4cib58-Z/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_poc_localhost.module.css"; // plasmic-import: nV7sRTPBx6ecWzFNNAWeQg/projectcss
import sty from "./PlasmicFormLayouts.module.css"; // plasmic-import: bBYHCE6CYA/css

export type PlasmicFormLayouts__VariantMembers = {};
export type PlasmicFormLayouts__VariantsArgs = {};
type VariantPropType = keyof PlasmicFormLayouts__VariantsArgs;
export const PlasmicFormLayouts__VariantProps = new Array<VariantPropType>();

export type PlasmicFormLayouts__ArgsType = {};
type ArgPropType = keyof PlasmicFormLayouts__ArgsType;
export const PlasmicFormLayouts__ArgProps = new Array<ArgPropType>();

export type PlasmicFormLayouts__OverridesType = {
  root?: p.Flex<"div">;
  formLayoutWithCards?: p.Flex<typeof FormLayoutWithCards>;
  formWithInlineLabels?: p.Flex<typeof FormWithInlineLabels>;
};

export interface DefaultFormLayoutsProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFormLayouts__RenderFunc(props: {
  variants: PlasmicFormLayouts__VariantsArgs;
  args: PlasmicFormLayouts__ArgsType;
  overrides: PlasmicFormLayouts__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__qAwM)}
            noOfLines={1 as const}
            size={"4xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oviSx
              )}
            >
              {"Form Layouts"}
            </div>
          </Heading>
          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__ur7Pu)}
            noOfLines={1 as const}
            size={"xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__o2NXw
              )}
            >
              {"Form layout with cards"}
            </div>
          </Heading>
          <FormLayoutWithCards
            data-plasmic-name={"formLayoutWithCards"}
            data-plasmic-override={overrides.formLayoutWithCards}
            className={classNames("__wab_instance", sty.formLayoutWithCards)}
          />

          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__zolJ)}
            noOfLines={1 as const}
            size={"xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__e2Dyb
              )}
            >
              {"Form with inline labels"}
            </div>
          </Heading>
          <FormWithInlineLabels
            data-plasmic-name={"formWithInlineLabels"}
            data-plasmic-override={overrides.formWithInlineLabels}
            className={classNames("__wab_instance", sty.formWithInlineLabels)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "formLayoutWithCards", "formWithInlineLabels"],
  formLayoutWithCards: ["formLayoutWithCards"],
  formWithInlineLabels: ["formWithInlineLabels"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  formLayoutWithCards: typeof FormLayoutWithCards;
  formWithInlineLabels: typeof FormWithInlineLabels;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFormLayouts__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFormLayouts__VariantsArgs;
    args?: PlasmicFormLayouts__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFormLayouts__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFormLayouts__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFormLayouts__ArgProps,
          internalVariantPropNames: PlasmicFormLayouts__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFormLayouts__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFormLayouts";
  } else {
    func.displayName = `PlasmicFormLayouts.${nodeName}`;
  }
  return func;
}

export const PlasmicFormLayouts = Object.assign(
  // Top-level PlasmicFormLayouts renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    formLayoutWithCards: makeNodeComponent("formLayoutWithCards"),
    formWithInlineLabels: makeNodeComponent("formWithInlineLabels"),

    // Metadata about props expected for PlasmicFormLayouts
    internalVariantProps: PlasmicFormLayouts__VariantProps,
    internalArgProps: PlasmicFormLayouts__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFormLayouts;
/* prettier-ignore-end */
