// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nV7sRTPBx6ecWzFNNAWeQg
// Component: alqXFEDWuA

import * as React from 'react';

import Head from 'next/head';
import Link, { LinkProps } from 'next/link';
import { useRouter } from 'next/router';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import { Heading } from '@chakra-ui/react'; // plasmic-import: 0G7l8BbhtHSG-/codeComponent
import { GridWithAddToCartButton } from '../../chakra/chakraPro/GridWithAddToCartButton'; // plasmic-import: g65HQ02LYrQF/codeComponent
import { GridWithFavouriteButton } from '../../chakra/chakraPro/GridWithFavouriteButton'; // plasmic-import: U8m5PHO69gH3/codeComponent
import { GridWithButtonGroup } from '../../chakra/chakraPro/GridWithButtonGroup'; // plasmic-import: Leb3_BKFZjyi/codeComponent
import { GridQuiteMinimalistic } from '../../chakra/chakraPro/GridQuiteMinimalistic'; // plasmic-import: EWU1gGYvgIXl/codeComponent

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_plasmic_poc_localhost.module.css'; // plasmic-import: nV7sRTPBx6ecWzFNNAWeQg/projectcss
import sty from './PlasmicProductGrids.module.css'; // plasmic-import: alqXFEDWuA/css

export type PlasmicProductGrids__VariantMembers = {};
export type PlasmicProductGrids__VariantsArgs = {};
type VariantPropType = keyof PlasmicProductGrids__VariantsArgs;
export const PlasmicProductGrids__VariantProps = new Array<VariantPropType>();

export type PlasmicProductGrids__ArgsType = {};
type ArgPropType = keyof PlasmicProductGrids__ArgsType;
export const PlasmicProductGrids__ArgProps = new Array<ArgPropType>();

export type PlasmicProductGrids__OverridesType = {
  root?: p.Flex<'div'>;
  gridWithAddToCartButton?: p.Flex<typeof GridWithAddToCartButton>;
  gridWithFavouriteButton?: p.Flex<typeof GridWithFavouriteButton>;
  gridWithButtonGroup?: p.Flex<typeof GridWithButtonGroup>;
  gridQuiteMinimalistic?: p.Flex<typeof GridQuiteMinimalistic>;
};

export interface DefaultProductGridsProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductGrids__RenderFunc(props: {
  variants: PlasmicProductGrids__VariantsArgs;
  args: PlasmicProductGrids__ArgsType;
  overrides: PlasmicProductGrids__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={'root'}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading__jyDIg)}
            noOfLines={1 as const}
            size={'4xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nf7CM
              )}
            >
              {'Product Grids'}
            </div>
          </Heading>
          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading__dPb06)}
            noOfLines={1 as const}
            size={'xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vN2
              )}
            >
              {'Grid with add to cart button'}
            </div>
          </Heading>
          <GridWithAddToCartButton
            data-plasmic-name={'gridWithAddToCartButton'}
            data-plasmic-override={overrides.gridWithAddToCartButton}
            className={classNames(
              '__wab_instance',
              sty.gridWithAddToCartButton
            )}
          />

          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading__tXwI7)}
            noOfLines={1 as const}
            size={'xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wplfz
              )}
            >
              {'Grid with favourite button'}
            </div>
          </Heading>
          <GridWithFavouriteButton
            data-plasmic-name={'gridWithFavouriteButton'}
            data-plasmic-override={overrides.gridWithFavouriteButton}
            className={classNames(
              '__wab_instance',
              sty.gridWithFavouriteButton
            )}
          />

          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading__h5MUp)}
            noOfLines={1 as const}
            size={'xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__giBfk
              )}
            >
              {'Grid with button group'}
            </div>
          </Heading>
          <GridWithButtonGroup
            data-plasmic-name={'gridWithButtonGroup'}
            data-plasmic-override={overrides.gridWithButtonGroup}
            className={classNames('__wab_instance', sty.gridWithButtonGroup)}
          />

          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading___18Oa)}
            noOfLines={1 as const}
            size={'xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__paqlE
              )}
            >
              {'Grid quite minimalistic'}
            </div>
          </Heading>
          <GridQuiteMinimalistic
            data-plasmic-name={'gridQuiteMinimalistic'}
            data-plasmic-override={overrides.gridQuiteMinimalistic}
            className={classNames('__wab_instance', sty.gridQuiteMinimalistic)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    'root',
    'gridWithAddToCartButton',
    'gridWithFavouriteButton',
    'gridWithButtonGroup',
    'gridQuiteMinimalistic',
  ],
  gridWithAddToCartButton: ['gridWithAddToCartButton'],
  gridWithFavouriteButton: ['gridWithFavouriteButton'],
  gridWithButtonGroup: ['gridWithButtonGroup'],
  gridQuiteMinimalistic: ['gridQuiteMinimalistic'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  gridWithAddToCartButton: typeof GridWithAddToCartButton;
  gridWithFavouriteButton: typeof GridWithFavouriteButton;
  gridWithButtonGroup: typeof GridWithButtonGroup;
  gridQuiteMinimalistic: typeof GridQuiteMinimalistic;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductGrids__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductGrids__VariantsArgs;
    args?: PlasmicProductGrids__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductGrids__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProductGrids__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProductGrids__ArgProps,
          internalVariantPropNames: PlasmicProductGrids__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicProductGrids__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicProductGrids';
  } else {
    func.displayName = `PlasmicProductGrids.${nodeName}`;
  }
  return func;
}

export const PlasmicProductGrids = Object.assign(
  // Top-level PlasmicProductGrids renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    gridWithAddToCartButton: makeNodeComponent('gridWithAddToCartButton'),
    gridWithFavouriteButton: makeNodeComponent('gridWithFavouriteButton'),
    gridWithButtonGroup: makeNodeComponent('gridWithButtonGroup'),
    gridQuiteMinimalistic: makeNodeComponent('gridQuiteMinimalistic'),

    // Metadata about props expected for PlasmicProductGrids
    internalVariantProps: PlasmicProductGrids__VariantProps,
    internalArgProps: PlasmicProductGrids__ArgProps,

    // Page metadata
    pageMetadata: {
      title: '',
      description: '',
      ogImageSrc: '',
      canonical: '',
    },
  }
);

export default PlasmicProductGrids;
/* prettier-ignore-end */
