// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nV7sRTPBx6ecWzFNNAWeQg
// Component: sas7Dyyu6T

import * as React from 'react';

import Head from 'next/head';
import Link, { LinkProps } from 'next/link';
import { useRouter } from 'next/router';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import { Heading } from '@chakra-ui/react'; // plasmic-import: 0G7l8BbhtHSG-/codeComponent
import { RadioCardGroup } from '../../chakra/chakraPro/Aplication/Form Elements/RadioCardGroup'; // plasmic-import: Hcz7qxxcjKH/codeComponent
import { CheckboxCardGroup } from '../../chakra/chakraPro/Aplication/Form Elements/CheckboxCardGroup'; // plasmic-import: h0k1Y8pUqQN/codeComponent
import { RadioIconButtonGroup } from '../../chakra/chakraPro/Aplication/Form Elements/RadioIconButtonGroup'; // plasmic-import: rAF3B97j9uF/codeComponent
import { RadioButtonGroup } from '../../chakra/chakraPro/Aplication/Form Elements/RadioButtonGroup'; // plasmic-import: U1QKOrLQ4bz/codeComponent
import { DropZone } from '../../chakra/chakraPro/Aplication/Form Elements/DropZone'; // plasmic-import: zT_lkH4L9yk/codeComponent
import { FloatingInputLabel } from '../../chakra/chakraPro/Aplication/Form Elements/FloatingInputLabel'; // plasmic-import: bZ3QvTI7POU/codeComponent
import { CustomSelect } from '../../chakra/chakraPro/Aplication/Form Elements/CustomSelect'; // plasmic-import: 0-B_ScD-fya/codeComponent

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_plasmic_poc_localhost.module.css'; // plasmic-import: nV7sRTPBx6ecWzFNNAWeQg/projectcss
import sty from './PlasmicFormElements.module.css'; // plasmic-import: sas7Dyyu6T/css

export type PlasmicFormElements__VariantMembers = {};
export type PlasmicFormElements__VariantsArgs = {};
type VariantPropType = keyof PlasmicFormElements__VariantsArgs;
export const PlasmicFormElements__VariantProps = new Array<VariantPropType>();

export type PlasmicFormElements__ArgsType = {};
type ArgPropType = keyof PlasmicFormElements__ArgsType;
export const PlasmicFormElements__ArgProps = new Array<ArgPropType>();

export type PlasmicFormElements__OverridesType = {
  root?: p.Flex<'div'>;
  radioCardGroup?: p.Flex<typeof RadioCardGroup>;
  checkboxCardGroup?: p.Flex<typeof CheckboxCardGroup>;
  radioIconButtonGroup?: p.Flex<typeof RadioIconButtonGroup>;
  radioButtonGroup?: p.Flex<typeof RadioButtonGroup>;
  dropZone?: p.Flex<typeof DropZone>;
  floatingInputLabel?: p.Flex<typeof FloatingInputLabel>;
  customSelect?: p.Flex<typeof CustomSelect>;
};

export interface DefaultFormElementsProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFormElements__RenderFunc(props: {
  variants: PlasmicFormElements__VariantsArgs;
  args: PlasmicFormElements__ArgsType;
  overrides: PlasmicFormElements__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={'root'}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading__ykIcO)}
            noOfLines={1 as const}
            size={'4xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__shISu
              )}
            >
              {'Form Elements'}
            </div>
          </Heading>
          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading__fo9ZC)}
            noOfLines={1 as const}
            size={'xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eZaD
              )}
            >
              {'Radio card group'}
            </div>
          </Heading>
          <RadioCardGroup
            data-plasmic-name={'radioCardGroup'}
            data-plasmic-override={overrides.radioCardGroup}
            className={classNames('__wab_instance', sty.radioCardGroup)}
          />

          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading__kqDpN)}
            noOfLines={1 as const}
            size={'xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cDRgL
              )}
            >
              {'Checkbox card group'}
            </div>
          </Heading>
          <CheckboxCardGroup
            data-plasmic-name={'checkboxCardGroup'}
            data-plasmic-override={overrides.checkboxCardGroup}
            className={classNames('__wab_instance', sty.checkboxCardGroup)}
          />

          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading__hoo5J)}
            noOfLines={1 as const}
            size={'xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bfqTr
              )}
            >
              {'Radio icon button group'}
            </div>
          </Heading>
          <RadioIconButtonGroup
            data-plasmic-name={'radioIconButtonGroup'}
            data-plasmic-override={overrides.radioIconButtonGroup}
            className={classNames('__wab_instance', sty.radioIconButtonGroup)}
          />

          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading__iiVw6)}
            noOfLines={1 as const}
            size={'xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jKHo
              )}
            >
              {'Radio button group'}
            </div>
          </Heading>
          <RadioButtonGroup
            data-plasmic-name={'radioButtonGroup'}
            data-plasmic-override={overrides.radioButtonGroup}
            className={classNames('__wab_instance', sty.radioButtonGroup)}
          />

          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading__rLIyc)}
            noOfLines={1 as const}
            size={'xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hGzrK
              )}
            >
              {'Drop zone'}
            </div>
          </Heading>
          <DropZone
            data-plasmic-name={'dropZone'}
            data-plasmic-override={overrides.dropZone}
            className={classNames('__wab_instance', sty.dropZone)}
          />

          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading__vPlpq)}
            noOfLines={1 as const}
            size={'xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___3R6Ri
              )}
            >
              {'Floating input label'}
            </div>
          </Heading>
          <FloatingInputLabel
            data-plasmic-name={'floatingInputLabel'}
            data-plasmic-override={overrides.floatingInputLabel}
            className={classNames('__wab_instance', sty.floatingInputLabel)}
          />

          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading__lQlpR)}
            noOfLines={1 as const}
            size={'xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___8Ew1
              )}
            >
              {'Custom select'}
            </div>
          </Heading>
          <CustomSelect
            data-plasmic-name={'customSelect'}
            data-plasmic-override={overrides.customSelect}
            className={classNames('__wab_instance', sty.customSelect)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    'root',
    'radioCardGroup',
    'checkboxCardGroup',
    'radioIconButtonGroup',
    'radioButtonGroup',
    'dropZone',
    'floatingInputLabel',
    'customSelect',
  ],
  radioCardGroup: ['radioCardGroup'],
  checkboxCardGroup: ['checkboxCardGroup'],
  radioIconButtonGroup: ['radioIconButtonGroup'],
  radioButtonGroup: ['radioButtonGroup'],
  dropZone: ['dropZone'],
  floatingInputLabel: ['floatingInputLabel'],
  customSelect: ['customSelect'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  radioCardGroup: typeof RadioCardGroup;
  checkboxCardGroup: typeof CheckboxCardGroup;
  radioIconButtonGroup: typeof RadioIconButtonGroup;
  radioButtonGroup: typeof RadioButtonGroup;
  dropZone: typeof DropZone;
  floatingInputLabel: typeof FloatingInputLabel;
  customSelect: typeof CustomSelect;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFormElements__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFormElements__VariantsArgs;
    args?: PlasmicFormElements__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFormElements__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFormElements__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFormElements__ArgProps,
          internalVariantPropNames: PlasmicFormElements__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicFormElements__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicFormElements';
  } else {
    func.displayName = `PlasmicFormElements.${nodeName}`;
  }
  return func;
}

export const PlasmicFormElements = Object.assign(
  // Top-level PlasmicFormElements renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    radioCardGroup: makeNodeComponent('radioCardGroup'),
    checkboxCardGroup: makeNodeComponent('checkboxCardGroup'),
    radioIconButtonGroup: makeNodeComponent('radioIconButtonGroup'),
    radioButtonGroup: makeNodeComponent('radioButtonGroup'),
    dropZone: makeNodeComponent('dropZone'),
    floatingInputLabel: makeNodeComponent('floatingInputLabel'),
    customSelect: makeNodeComponent('customSelect'),

    // Metadata about props expected for PlasmicFormElements
    internalVariantProps: PlasmicFormElements__VariantProps,
    internalArgProps: PlasmicFormElements__ArgProps,

    // Page metadata
    pageMetadata: {
      title: '',
      description: '',
      ogImageSrc: '',
      canonical: '',
    },
  }
);

export default PlasmicFormElements;
/* prettier-ignore-end */
