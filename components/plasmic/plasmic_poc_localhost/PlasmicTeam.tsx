// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nV7sRTPBx6ecWzFNNAWeQg
// Component: q98K70Wwcx

import * as React from 'react';

import Head from 'next/head';
import Link, { LinkProps } from 'next/link';
import { useRouter } from 'next/router';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import { Heading } from '@chakra-ui/react'; // plasmic-import: 0G7l8BbhtHSG-/codeComponent
import { TeamWithLargeImage } from '../../chakra/chakraPro/Marketing/Team/TeamWithLargeImage'; // plasmic-import: S2oEOUSLCQ8O/codeComponent
import { TeamWithInlineHeadline } from '../../chakra/chakraPro/Marketing/Team/TeamWithInlineHeadline'; // plasmic-import: sLtSPEYBtciC/codeComponent
import { TeamWithAvatar } from '../../chakra/chakraPro/Marketing/Team/TeamWithAvatar'; // plasmic-import: 6GDcnp0agtUb/codeComponent
import { TeamWithSquarePhoto } from '../../chakra/chakraPro/Marketing/Team/TeamWithSquarePhoto'; // plasmic-import: 9P-SqUxP5HXZ/codeComponent
import { TeamWithCard } from '../../chakra/chakraPro/Marketing/Team/TeamWithCard'; // plasmic-import: VUlbO097xlk8/codeComponent

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_plasmic_poc_localhost.module.css'; // plasmic-import: nV7sRTPBx6ecWzFNNAWeQg/projectcss
import sty from './PlasmicTeam.module.css'; // plasmic-import: q98K70Wwcx/css

export type PlasmicTeam__VariantMembers = {};
export type PlasmicTeam__VariantsArgs = {};
type VariantPropType = keyof PlasmicTeam__VariantsArgs;
export const PlasmicTeam__VariantProps = new Array<VariantPropType>();

export type PlasmicTeam__ArgsType = {};
type ArgPropType = keyof PlasmicTeam__ArgsType;
export const PlasmicTeam__ArgProps = new Array<ArgPropType>();

export type PlasmicTeam__OverridesType = {
  root?: p.Flex<'div'>;
  teamWithLargeImage?: p.Flex<typeof TeamWithLargeImage>;
  teamWithInlineHeadline?: p.Flex<typeof TeamWithInlineHeadline>;
  teamWithAvatar?: p.Flex<typeof TeamWithAvatar>;
  teamWithSquarePhoto?: p.Flex<typeof TeamWithSquarePhoto>;
  teamWithCard?: p.Flex<typeof TeamWithCard>;
};

export interface DefaultTeamProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTeam__RenderFunc(props: {
  variants: PlasmicTeam__VariantsArgs;
  args: PlasmicTeam__ArgsType;
  overrides: PlasmicTeam__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={'root'}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading__omhNd)}
            noOfLines={1 as const}
            size={'4xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rjRoH
              )}
            >
              {'Team'}
            </div>
          </Heading>
          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading__c92Ko)}
            noOfLines={1 as const}
            size={'xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gDjjT
              )}
            >
              {'Team with large image'}
            </div>
          </Heading>
          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading__ahIpA)}
            noOfLines={1 as const}
            size={'xl' as const}
          >
            <TeamWithLargeImage
              data-plasmic-name={'teamWithLargeImage'}
              data-plasmic-override={overrides.teamWithLargeImage}
              className={classNames('__wab_instance', sty.teamWithLargeImage)}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2Rm9J
              )}
            >
              {'Team with inline headline'}
            </div>
          </Heading>
          <TeamWithInlineHeadline
            data-plasmic-name={'teamWithInlineHeadline'}
            data-plasmic-override={overrides.teamWithInlineHeadline}
            className={classNames('__wab_instance', sty.teamWithInlineHeadline)}
          />

          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading__hxx6F)}
            noOfLines={1 as const}
            size={'xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__x6Tbu
              )}
            >
              {'Team with avatar'}
            </div>
          </Heading>
          <TeamWithAvatar
            data-plasmic-name={'teamWithAvatar'}
            data-plasmic-override={overrides.teamWithAvatar}
            className={classNames('__wab_instance', sty.teamWithAvatar)}
          />

          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading__q76Rs)}
            noOfLines={1 as const}
            size={'xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rw4Yp
              )}
            >
              {'Team with square photo'}
            </div>
          </Heading>
          <TeamWithSquarePhoto
            data-plasmic-name={'teamWithSquarePhoto'}
            data-plasmic-override={overrides.teamWithSquarePhoto}
            className={classNames('__wab_instance', sty.teamWithSquarePhoto)}
          />

          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading__sf3Y)}
            noOfLines={1 as const}
            size={'xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ibmUt
              )}
            >
              {'Team with card'}
            </div>
          </Heading>
          <TeamWithCard
            data-plasmic-name={'teamWithCard'}
            data-plasmic-override={overrides.teamWithCard}
            className={classNames('__wab_instance', sty.teamWithCard)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    'root',
    'teamWithLargeImage',
    'teamWithInlineHeadline',
    'teamWithAvatar',
    'teamWithSquarePhoto',
    'teamWithCard',
  ],
  teamWithLargeImage: ['teamWithLargeImage'],
  teamWithInlineHeadline: ['teamWithInlineHeadline'],
  teamWithAvatar: ['teamWithAvatar'],
  teamWithSquarePhoto: ['teamWithSquarePhoto'],
  teamWithCard: ['teamWithCard'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  teamWithLargeImage: typeof TeamWithLargeImage;
  teamWithInlineHeadline: typeof TeamWithInlineHeadline;
  teamWithAvatar: typeof TeamWithAvatar;
  teamWithSquarePhoto: typeof TeamWithSquarePhoto;
  teamWithCard: typeof TeamWithCard;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTeam__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTeam__VariantsArgs;
    args?: PlasmicTeam__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTeam__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTeam__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTeam__ArgProps,
          internalVariantPropNames: PlasmicTeam__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicTeam__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicTeam';
  } else {
    func.displayName = `PlasmicTeam.${nodeName}`;
  }
  return func;
}

export const PlasmicTeam = Object.assign(
  // Top-level PlasmicTeam renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    teamWithLargeImage: makeNodeComponent('teamWithLargeImage'),
    teamWithInlineHeadline: makeNodeComponent('teamWithInlineHeadline'),
    teamWithAvatar: makeNodeComponent('teamWithAvatar'),
    teamWithSquarePhoto: makeNodeComponent('teamWithSquarePhoto'),
    teamWithCard: makeNodeComponent('teamWithCard'),

    // Metadata about props expected for PlasmicTeam
    internalVariantProps: PlasmicTeam__VariantProps,
    internalArgProps: PlasmicTeam__ArgProps,

    // Page metadata
    pageMetadata: {
      title: '',
      description: '',
      ogImageSrc: '',
      canonical: '',
    },
  }
);

export default PlasmicTeam;
/* prettier-ignore-end */
