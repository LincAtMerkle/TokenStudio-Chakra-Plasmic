// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nV7sRTPBx6ecWzFNNAWeQg
// Component: omEku59t7P

import * as React from 'react';

import Head from 'next/head';
import Link, { LinkProps } from 'next/link';
import { useRouter } from 'next/router';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import { PricingWithCornerBadge } from '../../chakra/chakraPro/Marketing/Pricing/PricingWithCornerBadge'; // plasmic-import: 2WDaZrTMVftj/codeComponent
import { PricingWithOneTier } from '../../chakra/chakraPro/Marketing/Pricing/PricingWithOneTier'; // plasmic-import: 8bgbNssWm3qk/codeComponent
import { PricingWithTwoTiers } from '../../chakra/chakraPro/Marketing/Pricing/PricingWithTwoTiers'; // plasmic-import: CU5InQRmYKx8/codeComponent
import { PricingWithThreeTiers } from '../../chakra/chakraPro/Marketing/Pricing/PricingWithThreeTiers'; // plasmic-import: uKdWDZ7PXmil/codeComponent
import { WithFlushedCards } from '../../chakra/chakraPro/Marketing/Pricing/WithFlushedCards'; // plasmic-import: Z3mR0qONoa72/codeComponent
import { ThreeTiersWithToggle } from '../../chakra/chakraPro/Marketing/Pricing/ThreeTiersWithToggle'; // plasmic-import: 9--KfKNuZUEp/codeComponent
import { TwoTiersWithBottomBlock } from '../../chakra/chakraPro/Marketing/Pricing/TwoTiersWithBottomBlock'; // plasmic-import: GYF0gf41uLgk/codeComponent
import { MultiColored } from '../../chakra/chakraPro/Marketing/Pricing/MultiColored'; // plasmic-import: nrz3USlVoErV/codeComponent

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_plasmic_poc_localhost.module.css'; // plasmic-import: nV7sRTPBx6ecWzFNNAWeQg/projectcss
import sty from './PlasmicPricing.module.css'; // plasmic-import: omEku59t7P/css

export type PlasmicPricing__VariantMembers = {};
export type PlasmicPricing__VariantsArgs = {};
type VariantPropType = keyof PlasmicPricing__VariantsArgs;
export const PlasmicPricing__VariantProps = new Array<VariantPropType>();

export type PlasmicPricing__ArgsType = {};
type ArgPropType = keyof PlasmicPricing__ArgsType;
export const PlasmicPricing__ArgProps = new Array<ArgPropType>();

export type PlasmicPricing__OverridesType = {
  root?: p.Flex<'div'>;
  pricingWithCornerBadge?: p.Flex<typeof PricingWithCornerBadge>;
  pricingWithOneTier?: p.Flex<typeof PricingWithOneTier>;
  pricingWithTwoTiers?: p.Flex<typeof PricingWithTwoTiers>;
  pricingWithThreeTiers?: p.Flex<typeof PricingWithThreeTiers>;
  withFlushedCards?: p.Flex<typeof WithFlushedCards>;
  threeTiersWithToggle?: p.Flex<typeof ThreeTiersWithToggle>;
  twoTiersWithBottomBlock?: p.Flex<typeof TwoTiersWithBottomBlock>;
  multiColored?: p.Flex<typeof MultiColored>;
};

export interface DefaultPricingProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPricing__RenderFunc(props: {
  variants: PlasmicPricing__VariantsArgs;
  args: PlasmicPricing__ArgsType;
  overrides: PlasmicPricing__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={'root'}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <PricingWithCornerBadge
            data-plasmic-name={'pricingWithCornerBadge'}
            data-plasmic-override={overrides.pricingWithCornerBadge}
            className={classNames('__wab_instance', sty.pricingWithCornerBadge)}
          />

          <PricingWithOneTier
            data-plasmic-name={'pricingWithOneTier'}
            data-plasmic-override={overrides.pricingWithOneTier}
            className={classNames('__wab_instance', sty.pricingWithOneTier)}
          />

          <PricingWithTwoTiers
            data-plasmic-name={'pricingWithTwoTiers'}
            data-plasmic-override={overrides.pricingWithTwoTiers}
            className={classNames('__wab_instance', sty.pricingWithTwoTiers)}
          />

          <PricingWithThreeTiers
            data-plasmic-name={'pricingWithThreeTiers'}
            data-plasmic-override={overrides.pricingWithThreeTiers}
            className={classNames('__wab_instance', sty.pricingWithThreeTiers)}
          />

          <WithFlushedCards
            data-plasmic-name={'withFlushedCards'}
            data-plasmic-override={overrides.withFlushedCards}
            className={classNames('__wab_instance', sty.withFlushedCards)}
          />

          <ThreeTiersWithToggle
            data-plasmic-name={'threeTiersWithToggle'}
            data-plasmic-override={overrides.threeTiersWithToggle}
            className={classNames('__wab_instance', sty.threeTiersWithToggle)}
          />

          <TwoTiersWithBottomBlock
            data-plasmic-name={'twoTiersWithBottomBlock'}
            data-plasmic-override={overrides.twoTiersWithBottomBlock}
            className={classNames(
              '__wab_instance',
              sty.twoTiersWithBottomBlock
            )}
          />

          <MultiColored
            data-plasmic-name={'multiColored'}
            data-plasmic-override={overrides.multiColored}
            className={classNames('__wab_instance', sty.multiColored)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    'root',
    'pricingWithCornerBadge',
    'pricingWithOneTier',
    'pricingWithTwoTiers',
    'pricingWithThreeTiers',
    'withFlushedCards',
    'threeTiersWithToggle',
    'twoTiersWithBottomBlock',
    'multiColored',
  ],
  pricingWithCornerBadge: ['pricingWithCornerBadge'],
  pricingWithOneTier: ['pricingWithOneTier'],
  pricingWithTwoTiers: ['pricingWithTwoTiers'],
  pricingWithThreeTiers: ['pricingWithThreeTiers'],
  withFlushedCards: ['withFlushedCards'],
  threeTiersWithToggle: ['threeTiersWithToggle'],
  twoTiersWithBottomBlock: ['twoTiersWithBottomBlock'],
  multiColored: ['multiColored'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  pricingWithCornerBadge: typeof PricingWithCornerBadge;
  pricingWithOneTier: typeof PricingWithOneTier;
  pricingWithTwoTiers: typeof PricingWithTwoTiers;
  pricingWithThreeTiers: typeof PricingWithThreeTiers;
  withFlushedCards: typeof WithFlushedCards;
  threeTiersWithToggle: typeof ThreeTiersWithToggle;
  twoTiersWithBottomBlock: typeof TwoTiersWithBottomBlock;
  multiColored: typeof MultiColored;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPricing__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPricing__VariantsArgs;
    args?: PlasmicPricing__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPricing__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPricing__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPricing__ArgProps,
          internalVariantPropNames: PlasmicPricing__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicPricing__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicPricing';
  } else {
    func.displayName = `PlasmicPricing.${nodeName}`;
  }
  return func;
}

export const PlasmicPricing = Object.assign(
  // Top-level PlasmicPricing renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    pricingWithCornerBadge: makeNodeComponent('pricingWithCornerBadge'),
    pricingWithOneTier: makeNodeComponent('pricingWithOneTier'),
    pricingWithTwoTiers: makeNodeComponent('pricingWithTwoTiers'),
    pricingWithThreeTiers: makeNodeComponent('pricingWithThreeTiers'),
    withFlushedCards: makeNodeComponent('withFlushedCards'),
    threeTiersWithToggle: makeNodeComponent('threeTiersWithToggle'),
    twoTiersWithBottomBlock: makeNodeComponent('twoTiersWithBottomBlock'),
    multiColored: makeNodeComponent('multiColored'),

    // Metadata about props expected for PlasmicPricing
    internalVariantProps: PlasmicPricing__VariantProps,
    internalArgProps: PlasmicPricing__ArgProps,

    // Page metadata
    pageMetadata: {
      title: '',
      description: '',
      ogImageSrc: '',
      canonical: '',
    },
  }
);

export default PlasmicPricing;
/* prettier-ignore-end */
