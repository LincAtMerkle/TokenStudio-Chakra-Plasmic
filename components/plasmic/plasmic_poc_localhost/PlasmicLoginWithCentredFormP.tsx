// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nV7sRTPBx6ecWzFNNAWeQg
// Component: XvgQRekOuT5

import * as React from 'react';

import Head from 'next/head';
import Link, { LinkProps } from 'next/link';
import { useRouter } from 'next/router';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import { LoginWithCentredForm } from '../../chakra/chakraPro/Application/Authentication/LoginWithCentredForm'; // plasmic-import: PZuCg-eLQu/codeComponent
import { Container } from '@chakra-ui/react'; // plasmic-import: N75QIOSVwX/codeComponent
import { Stack } from '@chakra-ui/react'; // plasmic-import: COXAdXyGiCzfNm/codeComponent
import { Logo } from '../../chakra/chakraPro/Application/Authentication/LoginWithCentredForm'; // plasmic-import: 1Ex1wCgkK3/codeComponent
import { Heading } from '@chakra-ui/react'; // plasmic-import: 0G7l8BbhtHSG-/codeComponent
import { HStack } from '@chakra-ui/react'; // plasmic-import: s_UAyIpoEi/codeComponent
import { Text } from '@chakra-ui/react'; // plasmic-import: SdN14ngBJybRru/codeComponent
import { Button } from '@chakra-ui/react'; // plasmic-import: TdxMoalAZRL/codeComponent
import { Box } from '@chakra-ui/react'; // plasmic-import: -E4B7lTUoD/codeComponent
import { FormControl } from '@chakra-ui/react'; // plasmic-import: 7qBVfEit46s/codeComponent
import { FormLabel } from '@chakra-ui/react'; // plasmic-import: qrPwpFjI80f/codeComponent
import { Input } from '@chakra-ui/react'; // plasmic-import: af17Ycvvo_OQfS/codeComponent
import { PasswordField } from '../../chakra/chakraPro/Application/Authentication/LoginWithCentredForm'; // plasmic-import: 3w3N64VhcL/codeComponent
import { Checkbox } from '@chakra-ui/react'; // plasmic-import: FOG2BpAjXwH/codeComponent
import { Divider } from '@chakra-ui/react'; // plasmic-import: 5hSSW3LzA3B/codeComponent
import { OAuthButtonGroup } from '../../chakra/chakraPro/Application/Authentication/LoginWithCentredForm'; // plasmic-import: LW0AKH5m61/codeComponent

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_plasmic_poc_localhost.module.css'; // plasmic-import: nV7sRTPBx6ecWzFNNAWeQg/projectcss
import sty from './PlasmicLoginWithCentredFormP.module.css'; // plasmic-import: XvgQRekOuT5/css

export type PlasmicLoginWithCentredFormP__VariantMembers = {};
export type PlasmicLoginWithCentredFormP__VariantsArgs = {};
type VariantPropType = keyof PlasmicLoginWithCentredFormP__VariantsArgs;
export const PlasmicLoginWithCentredFormP__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLoginWithCentredFormP__ArgsType = {};
type ArgPropType = keyof PlasmicLoginWithCentredFormP__ArgsType;
export const PlasmicLoginWithCentredFormP__ArgProps = new Array<ArgPropType>();

export type PlasmicLoginWithCentredFormP__OverridesType = {
  root?: p.Flex<typeof LoginWithCentredForm>;
  chakraUiContainer?: p.Flex<typeof Container>;
  logo?: p.Flex<typeof Logo>;
  chakraUiHeading?: p.Flex<typeof Heading>;
  chakraUiBox?: p.Flex<typeof Box>;
  chakraUiFormControl?: p.Flex<typeof FormControl>;
  chakraUiFormLabel?: p.Flex<typeof FormLabel>;
  chakraUiInput?: p.Flex<typeof Input>;
  passwordField?: p.Flex<typeof PasswordField>;
  chakraUiCheckbox?: p.Flex<typeof Checkbox>;
  oAuthButtonGroup?: p.Flex<typeof OAuthButtonGroup>;
};

export interface DefaultLoginWithCentredFormPProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLoginWithCentredFormP__RenderFunc(props: {
  variants: PlasmicLoginWithCentredFormP__VariantsArgs;
  args: PlasmicLoginWithCentredFormP__ArgsType;
  overrides: PlasmicLoginWithCentredFormP__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <LoginWithCentredForm
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        '__wab_instance',
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Container
        data-plasmic-name={'chakraUiContainer'}
        data-plasmic-override={overrides.chakraUiContainer}
        centerContent={false}
        className={classNames('__wab_instance', sty.chakraUiContainer)}
        px={0 as const}
        py={'5' as const}
        variant={'colorfulVariant' as const}
      >
        <Stack
          className={classNames('__wab_instance', sty.chakraUiStack__vEyf)}
          direction={'column' as const}
          spacing={8 as const}
        >
          <Logo
            data-plasmic-name={'logo'}
            data-plasmic-override={overrides.logo}
            className={classNames('__wab_instance', sty.logo)}
          />

          <Stack
            align={'center' as const}
            className={classNames('__wab_instance', sty.chakraUiStack__bKWyo)}
            direction={'column' as const}
            spacing={'8' as const}
          >
            <Stack
              align={'start' as const}
              className={classNames('__wab_instance', sty.chakraUiStack__kpvWh)}
              direction={'column' as const}
              spacing={10 as const}
            >
              <Heading
                data-plasmic-name={'chakraUiHeading'}
                data-plasmic-override={overrides.chakraUiHeading}
                className={classNames('__wab_instance', sty.chakraUiHeading)}
                noOfLines={1 as const}
                size={'20' as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iQitn
                  )}
                >
                  {'Log in to your account'}
                </div>
              </Heading>
              <HStack
                className={classNames(
                  '__wab_instance',
                  sty.chakraUiHStack__wZvZt
                )}
                direction={'row' as const}
                justify={'center' as const}
                spacing={'1' as const}
              >
                <Text
                  className={classNames(
                    '__wab_instance',
                    sty.chakraUiText__viz2C
                  )}
                  fontStyle={'normal' as const}
                  size={'md' as const}
                  variant={'regular' as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ecc0U
                    )}
                  >
                    {"Don't have an account?"}
                  </div>
                </Text>
                <Button
                  className={classNames(
                    '__wab_instance',
                    sty.chakraUiButton__l0Z23
                  )}
                  colorScheme={'pink' as const}
                  variant={'link' as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1MzLp
                    )}
                  >
                    {'Sign up'}
                  </div>
                </Button>
              </HStack>
            </Stack>
          </Stack>
          <Box
            data-plasmic-name={'chakraUiBox'}
            data-plasmic-override={overrides.chakraUiBox}
            className={classNames('__wab_instance', sty.chakraUiBox)}
            px={'4' as const}
            py={'0' as const}
          >
            <Stack
              className={classNames('__wab_instance', sty.chakraUiStack__dsBr2)}
              direction={'column' as const}
              spacing={'6' as const}
            >
              <Stack
                className={classNames(
                  '__wab_instance',
                  sty.chakraUiStack__tw6S4
                )}
                direction={'column' as const}
                spacing={'5' as const}
              >
                <FormControl
                  data-plasmic-name={'chakraUiFormControl'}
                  data-plasmic-override={overrides.chakraUiFormControl}
                  className={classNames(
                    '__wab_instance',
                    sty.chakraUiFormControl
                  )}
                >
                  <FormLabel
                    data-plasmic-name={'chakraUiFormLabel'}
                    data-plasmic-override={overrides.chakraUiFormLabel}
                    className={classNames(
                      '__wab_instance',
                      sty.chakraUiFormLabel
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vlTq6
                      )}
                    >
                      {'Email'}
                    </div>
                  </FormLabel>
                  <Input
                    data-plasmic-name={'chakraUiInput'}
                    data-plasmic-override={overrides.chakraUiInput}
                    className={classNames('__wab_instance', sty.chakraUiInput)}
                    errorBorderColor={'red.500' as const}
                    focusBorderColor={'blue.500' as const}
                  />

                  <PasswordField
                    data-plasmic-name={'passwordField'}
                    data-plasmic-override={overrides.passwordField}
                    className={classNames('__wab_instance', sty.passwordField)}
                  />
                </FormControl>
                <HStack
                  className={classNames(
                    '__wab_instance',
                    sty.chakraUiHStack__r90J4
                  )}
                  direction={'row' as const}
                  justify={'space-between' as const}
                  spacing={8 as const}
                >
                  <Checkbox
                    data-plasmic-name={'chakraUiCheckbox'}
                    data-plasmic-override={overrides.chakraUiCheckbox}
                    className={classNames(
                      '__wab_instance',
                      sty.chakraUiCheckbox
                    )}
                    colorScheme={'blue' as const}
                    spacing={'0.5rem' as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3Fl1F
                      )}
                    >
                      {'Checkbox'}
                    </div>
                  </Checkbox>
                  <Button
                    className={classNames(
                      '__wab_instance',
                      sty.chakraUiButton__eogMf
                    )}
                    colorScheme={'pink' as const}
                    size={'sm' as const}
                    variant={'link' as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__s5AH
                      )}
                    >
                      {'Forgot password?'}
                    </div>
                  </Button>
                </HStack>
              </Stack>
              <Stack
                className={classNames(
                  '__wab_instance',
                  sty.chakraUiStack___7UZ2H
                )}
                direction={'column' as const}
                spacing={'6' as const}
              >
                <Button
                  className={classNames(
                    '__wab_instance',
                    sty.chakraUiButton__kc7W4
                  )}
                  variant={'primary' as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jv6Tr
                    )}
                  >
                    {'Sign in'}
                  </div>
                </Button>
                <HStack
                  className={classNames(
                    '__wab_instance',
                    sty.chakraUiHStack___10XSp
                  )}
                  direction={'row' as const}
                  spacing={8 as const}
                >
                  <Divider
                    className={classNames(
                      '__wab_instance',
                      sty.chakraUiDivider__uifpG
                    )}
                  />

                  <Text
                    className={classNames(
                      '__wab_instance',
                      sty.chakraUiText__d5IfQ
                    )}
                    fontStyle={'normal' as const}
                    size={'md' as const}
                    variant={'regular' as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vilpN
                      )}
                    >
                      {'or continue with'}
                    </div>
                  </Text>
                  <Divider
                    className={classNames(
                      '__wab_instance',
                      sty.chakraUiDivider__qlkxA
                    )}
                  />
                </HStack>
                <OAuthButtonGroup
                  data-plasmic-name={'oAuthButtonGroup'}
                  data-plasmic-override={overrides.oAuthButtonGroup}
                  className={classNames('__wab_instance', sty.oAuthButtonGroup)}
                />
              </Stack>
            </Stack>
          </Box>
        </Stack>
      </Container>
    </LoginWithCentredForm>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    'root',
    'chakraUiContainer',
    'logo',
    'chakraUiHeading',
    'chakraUiBox',
    'chakraUiFormControl',
    'chakraUiFormLabel',
    'chakraUiInput',
    'passwordField',
    'chakraUiCheckbox',
    'oAuthButtonGroup',
  ],
  chakraUiContainer: [
    'chakraUiContainer',
    'logo',
    'chakraUiHeading',
    'chakraUiBox',
    'chakraUiFormControl',
    'chakraUiFormLabel',
    'chakraUiInput',
    'passwordField',
    'chakraUiCheckbox',
    'oAuthButtonGroup',
  ],
  logo: ['logo'],
  chakraUiHeading: ['chakraUiHeading'],
  chakraUiBox: [
    'chakraUiBox',
    'chakraUiFormControl',
    'chakraUiFormLabel',
    'chakraUiInput',
    'passwordField',
    'chakraUiCheckbox',
    'oAuthButtonGroup',
  ],
  chakraUiFormControl: [
    'chakraUiFormControl',
    'chakraUiFormLabel',
    'chakraUiInput',
    'passwordField',
  ],
  chakraUiFormLabel: ['chakraUiFormLabel'],
  chakraUiInput: ['chakraUiInput'],
  passwordField: ['passwordField'],
  chakraUiCheckbox: ['chakraUiCheckbox'],
  oAuthButtonGroup: ['oAuthButtonGroup'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof LoginWithCentredForm;
  chakraUiContainer: typeof Container;
  logo: typeof Logo;
  chakraUiHeading: typeof Heading;
  chakraUiBox: typeof Box;
  chakraUiFormControl: typeof FormControl;
  chakraUiFormLabel: typeof FormLabel;
  chakraUiInput: typeof Input;
  passwordField: typeof PasswordField;
  chakraUiCheckbox: typeof Checkbox;
  oAuthButtonGroup: typeof OAuthButtonGroup;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLoginWithCentredFormP__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLoginWithCentredFormP__VariantsArgs;
    args?: PlasmicLoginWithCentredFormP__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLoginWithCentredFormP__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLoginWithCentredFormP__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLoginWithCentredFormP__ArgProps,
          internalVariantPropNames: PlasmicLoginWithCentredFormP__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicLoginWithCentredFormP__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicLoginWithCentredFormP';
  } else {
    func.displayName = `PlasmicLoginWithCentredFormP.${nodeName}`;
  }
  return func;
}

export const PlasmicLoginWithCentredFormP = Object.assign(
  // Top-level PlasmicLoginWithCentredFormP renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    chakraUiContainer: makeNodeComponent('chakraUiContainer'),
    logo: makeNodeComponent('logo'),
    chakraUiHeading: makeNodeComponent('chakraUiHeading'),
    chakraUiBox: makeNodeComponent('chakraUiBox'),
    chakraUiFormControl: makeNodeComponent('chakraUiFormControl'),
    chakraUiFormLabel: makeNodeComponent('chakraUiFormLabel'),
    chakraUiInput: makeNodeComponent('chakraUiInput'),
    passwordField: makeNodeComponent('passwordField'),
    chakraUiCheckbox: makeNodeComponent('chakraUiCheckbox'),
    oAuthButtonGroup: makeNodeComponent('oAuthButtonGroup'),

    // Metadata about props expected for PlasmicLoginWithCentredFormP
    internalVariantProps: PlasmicLoginWithCentredFormP__VariantProps,
    internalArgProps: PlasmicLoginWithCentredFormP__ArgProps,
  }
);

export default PlasmicLoginWithCentredFormP;
/* prettier-ignore-end */
