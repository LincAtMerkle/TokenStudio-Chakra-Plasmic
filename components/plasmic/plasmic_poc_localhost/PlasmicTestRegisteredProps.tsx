// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nV7sRTPBx6ecWzFNNAWeQg
// Component: PnXlaw5-7i

import * as React from 'react';

import Head from 'next/head';
import Link, { LinkProps } from 'next/link';
import { useRouter } from 'next/router';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import { LoginWithCentredForm } from '../../chakra/chakraPro/Application/Authentication/LoginWithCentredForm'; // plasmic-import: PZuCg-eLQu/codeComponent
import { Container } from '@chakra-ui/react'; // plasmic-import: N75QIOSVwX/codeComponent
import { Stack } from '@chakra-ui/react'; // plasmic-import: COXAdXyGiCzfNm/codeComponent
import { Logo } from '../../chakra/chakraPro/Application/Authentication/LoginWithCentredForm'; // plasmic-import: 1Ex1wCgkK3/codeComponent
import { Box } from '@chakra-ui/react'; // plasmic-import: -E4B7lTUoD/codeComponent
import { FormControl } from '@chakra-ui/react'; // plasmic-import: 7qBVfEit46s/codeComponent
import { FormLabel } from '@chakra-ui/react'; // plasmic-import: qrPwpFjI80f/codeComponent
import { Input } from '@chakra-ui/react'; // plasmic-import: af17Ycvvo_OQfS/codeComponent
import { PasswordField } from '../../chakra/chakraPro/Application/Authentication/LoginWithCentredForm'; // plasmic-import: 3w3N64VhcL/codeComponent
import { HStack } from '@chakra-ui/react'; // plasmic-import: s_UAyIpoEi/codeComponent
import { Checkbox } from '@chakra-ui/react'; // plasmic-import: FOG2BpAjXwH/codeComponent
import { Button } from '@chakra-ui/react'; // plasmic-import: TdxMoalAZRL/codeComponent
import { Divider } from '@chakra-ui/react'; // plasmic-import: 5hSSW3LzA3B/codeComponent
import { Text } from '@chakra-ui/react'; // plasmic-import: SdN14ngBJybRru/codeComponent
import { OAuthButtonGroup } from '../../chakra/chakraPro/Application/Authentication/LoginWithCentredForm'; // plasmic-import: LW0AKH5m61/codeComponent
import { Heading } from '@chakra-ui/react'; // plasmic-import: 0G7l8BbhtHSG-/codeComponent

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_plasmic_poc_localhost.module.css'; // plasmic-import: nV7sRTPBx6ecWzFNNAWeQg/projectcss
import sty from './PlasmicTestRegisteredProps.module.css'; // plasmic-import: PnXlaw5-7i/css

import FrameIcon from './icons/PlasmicIcon__Frame'; // plasmic-import: x3uAd421x/icon
import Frame6Icon from './icons/PlasmicIcon__Frame6'; // plasmic-import: t0XelBRbV/icon
import Frame3Icon from './icons/PlasmicIcon__Frame3'; // plasmic-import: lve4hDeenJ/icon
import Frame4Icon from './icons/PlasmicIcon__Frame4'; // plasmic-import: 0z6mVDyob3/icon
import Frame5Icon from './icons/PlasmicIcon__Frame5'; // plasmic-import: WSp0d90qg4/icon

export type PlasmicTestRegisteredProps__VariantMembers = {};
export type PlasmicTestRegisteredProps__VariantsArgs = {};
type VariantPropType = keyof PlasmicTestRegisteredProps__VariantsArgs;
export const PlasmicTestRegisteredProps__VariantProps =
  new Array<VariantPropType>();

export type PlasmicTestRegisteredProps__ArgsType = {};
type ArgPropType = keyof PlasmicTestRegisteredProps__ArgsType;
export const PlasmicTestRegisteredProps__ArgProps = new Array<ArgPropType>();

export type PlasmicTestRegisteredProps__OverridesType = {
  root?: p.Flex<'div'>;
  loginWithCentredForm?: p.Flex<typeof LoginWithCentredForm>;
  chakraUiContainer?: p.Flex<typeof Container>;
  logo?: p.Flex<typeof Logo>;
  chakraUiBox?: p.Flex<typeof Box>;
  chakraUiFormControl?: p.Flex<typeof FormControl>;
  chakraUiFormLabel?: p.Flex<typeof FormLabel>;
  chakraUiInput?: p.Flex<typeof Input>;
  passwordField?: p.Flex<typeof PasswordField>;
  chakraUiCheckbox?: p.Flex<typeof Checkbox>;
  oAuthButtonGroup?: p.Flex<typeof OAuthButtonGroup>;
  chakraUiHeading?: p.Flex<typeof Heading>;
  divchakraStack?: p.Flex<'div'>;
  divchakraStack2?: p.Flex<'div'>;
  divchakraStack3?: p.Flex<'div'>;
  heading2LogInToYourAccount?: p.Flex<'div'>;
  pchakraText?: p.Flex<'div'>;
  divcssK7Rgns?: p.Flex<'div'>;
  divchakraStack4?: p.Flex<'div'>;
  divchakraStack5?: p.Flex<'div'>;
  group?: p.Flex<'div'>;
  labelEmail?: p.Flex<'div'>;
  input?: p.Flex<'div'>;
  group2?: p.Flex<'div'>;
  labelPassword?: p.Flex<'div'>;
  divchakraInputGroup?: p.Flex<'div'>;
  input2?: p.Flex<'div'>;
  buttonRevealPasswordSvg?: p.Flex<'div'>;
  divchakraStack6?: p.Flex<'div'>;
  label?: p.Flex<'div'>;
  spanchakraCheckboxControl?: p.Flex<'div'>;
  svg2?: p.Flex<'div'>;
  buttonForgotPassword?: p.Flex<'div'>;
  divchakraStack7?: p.Flex<'div'>;
  divchakraStack8?: p.Flex<'div'>;
  separator?: p.Flex<'div'>;
  orContinueWith?: p.Flex<'div'>;
  separator2?: p.Flex<'div'>;
  button?: p.Flex<'div'>;
  group3?: p.Flex<'div'>;
  button2?: p.Flex<'div'>;
  svg3?: p.Flex<'div'>;
  frame?: p.Flex<'div'>;
  img?: p.Flex<typeof p.PlasmicImg>;
  button3?: p.Flex<'div'>;
  svg4?: p.Flex<'div'>;
  button4?: p.Flex<'div'>;
  svg5?: p.Flex<'div'>;
};

export interface DefaultTestRegisteredPropsProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTestRegisteredProps__RenderFunc(props: {
  variants: PlasmicTestRegisteredProps__VariantsArgs;
  args: PlasmicTestRegisteredProps__ArgsType;
  overrides: PlasmicTestRegisteredProps__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={'root'}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <LoginWithCentredForm
            data-plasmic-name={'loginWithCentredForm'}
            data-plasmic-override={overrides.loginWithCentredForm}
            className={classNames('__wab_instance', sty.loginWithCentredForm)}
          >
            <Container
              data-plasmic-name={'chakraUiContainer'}
              data-plasmic-override={overrides.chakraUiContainer}
              centerContent={false}
              className={classNames('__wab_instance', sty.chakraUiContainer)}
              px={0 as const}
              py={'5' as const}
              variant={'colorfulVariant' as const}
            >
              <Stack
                className={classNames(
                  '__wab_instance',
                  sty.chakraUiStack__iFbF
                )}
                direction={'column' as const}
                spacing={8 as const}
              >
                <Logo
                  data-plasmic-name={'logo'}
                  data-plasmic-override={overrides.logo}
                  className={classNames('__wab_instance', sty.logo)}
                />

                <Box
                  data-plasmic-name={'chakraUiBox'}
                  data-plasmic-override={overrides.chakraUiBox}
                  className={classNames('__wab_instance', sty.chakraUiBox)}
                  px={'4' as const}
                  py={'0' as const}
                >
                  <Stack
                    className={classNames(
                      '__wab_instance',
                      sty.chakraUiStack__ts3Hw
                    )}
                    direction={'column' as const}
                    spacing={'6' as const}
                  >
                    <Stack
                      className={classNames(
                        '__wab_instance',
                        sty.chakraUiStack__n1VDh
                      )}
                      direction={'column' as const}
                      spacing={'5' as const}
                    >
                      <FormControl
                        data-plasmic-name={'chakraUiFormControl'}
                        data-plasmic-override={overrides.chakraUiFormControl}
                        className={classNames(
                          '__wab_instance',
                          sty.chakraUiFormControl
                        )}
                      >
                        <FormLabel
                          data-plasmic-name={'chakraUiFormLabel'}
                          data-plasmic-override={overrides.chakraUiFormLabel}
                          className={classNames(
                            '__wab_instance',
                            sty.chakraUiFormLabel
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pybse
                            )}
                          >
                            {'Email'}
                          </div>
                        </FormLabel>
                        <Input
                          data-plasmic-name={'chakraUiInput'}
                          data-plasmic-override={overrides.chakraUiInput}
                          className={classNames(
                            '__wab_instance',
                            sty.chakraUiInput
                          )}
                          errorBorderColor={'red.500' as const}
                          focusBorderColor={'blue.500' as const}
                        />

                        <PasswordField
                          data-plasmic-name={'passwordField'}
                          data-plasmic-override={overrides.passwordField}
                          className={classNames(
                            '__wab_instance',
                            sty.passwordField
                          )}
                        />
                      </FormControl>
                      <HStack
                        className={classNames(
                          '__wab_instance',
                          sty.chakraUiHStack__jVEj8
                        )}
                        direction={'row' as const}
                        justify={'space-between' as const}
                        spacing={8 as const}
                      >
                        <Checkbox
                          data-plasmic-name={'chakraUiCheckbox'}
                          data-plasmic-override={overrides.chakraUiCheckbox}
                          className={classNames(
                            '__wab_instance',
                            sty.chakraUiCheckbox
                          )}
                          colorScheme={'blue' as const}
                          spacing={'0.5rem' as const}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gTzJr
                            )}
                          >
                            {'Checkbox'}
                          </div>
                        </Checkbox>
                        <Button
                          className={classNames(
                            '__wab_instance',
                            sty.chakraUiButton__kh5W
                          )}
                          colorScheme={'pink' as const}
                          size={'sm' as const}
                          variant={'link' as const}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__f2GEt
                            )}
                          >
                            {'Forgot password?'}
                          </div>
                        </Button>
                      </HStack>
                    </Stack>
                    <Stack
                      className={classNames(
                        '__wab_instance',
                        sty.chakraUiStack__do89Y
                      )}
                      direction={'column' as const}
                      spacing={'6' as const}
                    >
                      <Button
                        className={classNames(
                          '__wab_instance',
                          sty.chakraUiButton__nXr
                        )}
                        isActive={false}
                        isLoading={false}
                        size={'lg' as const}
                        variant={'primary' as const}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__m9JTw
                          )}
                        >
                          {'Sign in'}
                        </div>
                      </Button>
                      <HStack
                        className={classNames(
                          '__wab_instance',
                          sty.chakraUiHStack__aCobf
                        )}
                        direction={'row' as const}
                        spacing={8 as const}
                      >
                        <Divider
                          className={classNames(
                            '__wab_instance',
                            sty.chakraUiDivider__pz2Yh
                          )}
                        />

                        <Text
                          className={classNames(
                            '__wab_instance',
                            sty.chakraUiText__uj5U3
                          )}
                          fontStyle={'normal' as const}
                          size={'md' as const}
                          variant={'regular' as const}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nsjTe
                            )}
                          >
                            {'or continue with'}
                          </div>
                        </Text>
                        <Divider
                          className={classNames(
                            '__wab_instance',
                            sty.chakraUiDivider__eXBps
                          )}
                        />
                      </HStack>
                      <OAuthButtonGroup
                        data-plasmic-name={'oAuthButtonGroup'}
                        data-plasmic-override={overrides.oAuthButtonGroup}
                        className={classNames(
                          '__wab_instance',
                          sty.oAuthButtonGroup
                        )}
                      />
                    </Stack>
                  </Stack>
                </Box>
                <Stack
                  align={'center' as const}
                  className={classNames(
                    '__wab_instance',
                    sty.chakraUiStack__deTL
                  )}
                  direction={'column' as const}
                  spacing={'8' as const}
                >
                  <Stack
                    className={classNames(
                      '__wab_instance',
                      sty.chakraUiStack__dfpKc
                    )}
                    direction={'column' as const}
                    spacing={'20' as const}
                  >
                    <Heading
                      data-plasmic-name={'chakraUiHeading'}
                      data-plasmic-override={overrides.chakraUiHeading}
                      className={classNames(
                        '__wab_instance',
                        sty.chakraUiHeading
                      )}
                      noOfLines={1 as const}
                      size={'20' as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wXt6
                        )}
                      >
                        {'Log in to your account'}
                      </div>
                    </Heading>
                    <HStack
                      className={classNames(
                        '__wab_instance',
                        sty.chakraUiHStack__rcEXi
                      )}
                      direction={'row' as const}
                      justify={'center' as const}
                      spacing={'1' as const}
                    >
                      <Text
                        className={classNames(
                          '__wab_instance',
                          sty.chakraUiText__y9COq
                        )}
                        fontStyle={'normal' as const}
                        size={'md' as const}
                        variant={'regular' as const}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uaMva
                          )}
                        >
                          {"Don't have an account?"}
                        </div>
                      </Text>
                      <Button
                        className={classNames(
                          '__wab_instance',
                          sty.chakraUiButton___6PBwZ
                        )}
                        colorScheme={'pink' as const}
                        variant={'link' as const}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lWjca
                          )}
                        >
                          {'Sign up'}
                        </div>
                      </Button>
                    </HStack>
                  </Stack>
                </Stack>
              </Stack>
            </Container>
          </LoginWithCentredForm>
          <div
            data-plasmic-name={'divchakraStack'}
            data-plasmic-override={overrides.divchakraStack}
            className={classNames(projectcss.all, sty.divchakraStack)}
          >
            <p.Stack
              as={'div'}
              data-plasmic-name={'divchakraStack2'}
              data-plasmic-override={overrides.divchakraStack2}
              hasGap={true}
              className={classNames(projectcss.all, sty.divchakraStack2)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__iAwx5)}>
                <FrameIcon
                  className={classNames(projectcss.all, sty.svg__e2Hcp)}
                  role={'img'}
                />
              </div>
              <p.Stack
                as={'div'}
                data-plasmic-name={'divchakraStack3'}
                data-plasmic-override={overrides.divchakraStack3}
                hasGap={true}
                className={classNames(projectcss.all, sty.divchakraStack3)}
              >
                <div
                  data-plasmic-name={'heading2LogInToYourAccount'}
                  data-plasmic-override={overrides.heading2LogInToYourAccount}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.heading2LogInToYourAccount
                  )}
                >
                  {'Log in to your account'}
                </div>
                <div
                  data-plasmic-name={'pchakraText'}
                  data-plasmic-override={overrides.pchakraText}
                  className={classNames(projectcss.all, sty.pchakraText)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5Z0M0
                    )}
                  >
                    {"Don't have an account? Sign up"}
                  </div>
                </div>
              </p.Stack>
            </p.Stack>
            <div
              data-plasmic-name={'divcssK7Rgns'}
              data-plasmic-override={overrides.divcssK7Rgns}
              className={classNames(projectcss.all, sty.divcssK7Rgns)}
            >
              <p.Stack
                as={'div'}
                data-plasmic-name={'divchakraStack4'}
                data-plasmic-override={overrides.divchakraStack4}
                hasGap={true}
                className={classNames(projectcss.all, sty.divchakraStack4)}
              >
                <p.Stack
                  as={'div'}
                  data-plasmic-name={'divchakraStack5'}
                  data-plasmic-override={overrides.divchakraStack5}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.divchakraStack5)}
                >
                  <p.Stack
                    as={'div'}
                    data-plasmic-name={'group'}
                    data-plasmic-override={overrides.group}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.group)}
                  >
                    <div
                      data-plasmic-name={'labelEmail'}
                      data-plasmic-override={overrides.labelEmail}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.labelEmail
                      )}
                    >
                      {'Email'}
                    </div>
                    <div
                      data-plasmic-name={'input'}
                      data-plasmic-override={overrides.input}
                      className={classNames(projectcss.all, sty.input)}
                    />
                  </p.Stack>
                  <p.Stack
                    as={'div'}
                    data-plasmic-name={'group2'}
                    data-plasmic-override={overrides.group2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.group2)}
                  >
                    <div
                      data-plasmic-name={'labelPassword'}
                      data-plasmic-override={overrides.labelPassword}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.labelPassword
                      )}
                    >
                      {'Password'}
                    </div>
                    <div
                      data-plasmic-name={'divchakraInputGroup'}
                      data-plasmic-override={overrides.divchakraInputGroup}
                      className={classNames(
                        projectcss.all,
                        sty.divchakraInputGroup
                      )}
                    >
                      <div
                        data-plasmic-name={'input2'}
                        data-plasmic-override={overrides.input2}
                        className={classNames(projectcss.all, sty.input2)}
                      />

                      <div
                        data-plasmic-name={'buttonRevealPasswordSvg'}
                        data-plasmic-override={
                          overrides.buttonRevealPasswordSvg
                        }
                        className={classNames(
                          projectcss.all,
                          sty.buttonRevealPasswordSvg
                        )}
                      >
                        <Frame6Icon
                          className={classNames(projectcss.all, sty.svg__eZQew)}
                          role={'img'}
                        />
                      </div>
                    </div>
                  </p.Stack>
                </p.Stack>
                <p.Stack
                  as={'div'}
                  data-plasmic-name={'divchakraStack6'}
                  data-plasmic-override={overrides.divchakraStack6}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.divchakraStack6)}
                >
                  <p.Stack
                    as={'div'}
                    data-plasmic-name={'label'}
                    data-plasmic-override={overrides.label}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.label)}
                  >
                    <div
                      data-plasmic-name={'spanchakraCheckboxControl'}
                      data-plasmic-override={
                        overrides.spanchakraCheckboxControl
                      }
                      className={classNames(
                        projectcss.all,
                        sty.spanchakraCheckboxControl
                      )}
                    >
                      <div
                        data-plasmic-name={'svg2'}
                        data-plasmic-override={overrides.svg2}
                        className={classNames(projectcss.all, sty.svg2)}
                      >
                        <Frame3Icon
                          className={classNames(projectcss.all, sty.svg__qEi6Z)}
                          role={'img'}
                        />
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mYxDb
                      )}
                    >
                      {'Remember me'}
                    </div>
                  </p.Stack>
                  <div
                    data-plasmic-name={'buttonForgotPassword'}
                    data-plasmic-override={overrides.buttonForgotPassword}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.buttonForgotPassword
                    )}
                  >
                    {'Forgot password?'}
                  </div>
                </p.Stack>
                <div
                  data-plasmic-name={'divchakraStack7'}
                  data-plasmic-override={overrides.divchakraStack7}
                  className={classNames(projectcss.all, sty.divchakraStack7)}
                >
                  <div
                    data-plasmic-name={'divchakraStack8'}
                    data-plasmic-override={overrides.divchakraStack8}
                    className={classNames(projectcss.all, sty.divchakraStack8)}
                  >
                    <div
                      data-plasmic-name={'separator'}
                      data-plasmic-override={overrides.separator}
                      className={classNames(projectcss.all, sty.separator)}
                    />

                    <div
                      data-plasmic-name={'orContinueWith'}
                      data-plasmic-override={overrides.orContinueWith}
                      className={classNames(projectcss.all, sty.orContinueWith)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ibFnb
                        )}
                      >
                        {'or continue with'}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={'separator2'}
                      data-plasmic-override={overrides.separator2}
                      className={classNames(projectcss.all, sty.separator2)}
                    />
                  </div>
                  <div
                    data-plasmic-name={'button'}
                    data-plasmic-override={overrides.button}
                    className={classNames(projectcss.all, sty.button)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m312N
                      )}
                    >
                      {'Sign in'}
                    </div>
                  </div>
                  <p.Stack
                    as={'div'}
                    data-plasmic-name={'group3'}
                    data-plasmic-override={overrides.group3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.group3)}
                  >
                    <div
                      data-plasmic-name={'button2'}
                      data-plasmic-override={overrides.button2}
                      className={classNames(projectcss.all, sty.button2)}
                    >
                      <div
                        data-plasmic-name={'svg3'}
                        data-plasmic-override={overrides.svg3}
                        className={classNames(projectcss.all, sty.svg3)}
                      >
                        <div
                          data-plasmic-name={'frame'}
                          data-plasmic-override={overrides.frame}
                          className={classNames(projectcss.all, sty.frame)}
                        >
                          <p.PlasmicImg
                            data-plasmic-name={'img'}
                            data-plasmic-override={overrides.img}
                            alt={''}
                            className={classNames(sty.img)}
                            displayHeight={'19.999px' as const}
                            displayMaxHeight={'none' as const}
                            displayMaxWidth={'100%' as const}
                            displayMinHeight={'0' as const}
                            displayMinWidth={'0' as const}
                            displayWidth={'19.574px' as const}
                            loading={'lazy' as const}
                            src={{
                              src: '/plasmic/plasmic_poc_localhost/images/group.svg',
                              fullWidth: 19.574,
                              fullHeight: 19.999,
                              aspectRatio: 1,
                            }}
                          />
                        </div>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={'button3'}
                      data-plasmic-override={overrides.button3}
                      className={classNames(projectcss.all, sty.button3)}
                    >
                      <div
                        data-plasmic-name={'svg4'}
                        data-plasmic-override={overrides.svg4}
                        className={classNames(projectcss.all, sty.svg4)}
                      >
                        <Frame4Icon
                          className={classNames(projectcss.all, sty.svg__pgRx)}
                          role={'img'}
                        />
                      </div>
                    </div>
                    <div
                      data-plasmic-name={'button4'}
                      data-plasmic-override={overrides.button4}
                      className={classNames(projectcss.all, sty.button4)}
                    >
                      <div
                        data-plasmic-name={'svg5'}
                        data-plasmic-override={overrides.svg5}
                        className={classNames(projectcss.all, sty.svg5)}
                      >
                        <Frame5Icon
                          className={classNames(projectcss.all, sty.svg__ho0Xy)}
                          role={'img'}
                        />
                      </div>
                    </div>
                  </p.Stack>
                </div>
              </p.Stack>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    'root',
    'loginWithCentredForm',
    'chakraUiContainer',
    'logo',
    'chakraUiBox',
    'chakraUiFormControl',
    'chakraUiFormLabel',
    'chakraUiInput',
    'passwordField',
    'chakraUiCheckbox',
    'oAuthButtonGroup',
    'chakraUiHeading',
    'divchakraStack',
    'divchakraStack2',
    'divchakraStack3',
    'heading2LogInToYourAccount',
    'pchakraText',
    'divcssK7Rgns',
    'divchakraStack4',
    'divchakraStack5',
    'group',
    'labelEmail',
    'input',
    'group2',
    'labelPassword',
    'divchakraInputGroup',
    'input2',
    'buttonRevealPasswordSvg',
    'divchakraStack6',
    'label',
    'spanchakraCheckboxControl',
    'svg2',
    'buttonForgotPassword',
    'divchakraStack7',
    'divchakraStack8',
    'separator',
    'orContinueWith',
    'separator2',
    'button',
    'group3',
    'button2',
    'svg3',
    'frame',
    'img',
    'button3',
    'svg4',
    'button4',
    'svg5',
  ],
  loginWithCentredForm: [
    'loginWithCentredForm',
    'chakraUiContainer',
    'logo',
    'chakraUiBox',
    'chakraUiFormControl',
    'chakraUiFormLabel',
    'chakraUiInput',
    'passwordField',
    'chakraUiCheckbox',
    'oAuthButtonGroup',
    'chakraUiHeading',
  ],
  chakraUiContainer: [
    'chakraUiContainer',
    'logo',
    'chakraUiBox',
    'chakraUiFormControl',
    'chakraUiFormLabel',
    'chakraUiInput',
    'passwordField',
    'chakraUiCheckbox',
    'oAuthButtonGroup',
    'chakraUiHeading',
  ],
  logo: ['logo'],
  chakraUiBox: [
    'chakraUiBox',
    'chakraUiFormControl',
    'chakraUiFormLabel',
    'chakraUiInput',
    'passwordField',
    'chakraUiCheckbox',
    'oAuthButtonGroup',
  ],
  chakraUiFormControl: [
    'chakraUiFormControl',
    'chakraUiFormLabel',
    'chakraUiInput',
    'passwordField',
  ],
  chakraUiFormLabel: ['chakraUiFormLabel'],
  chakraUiInput: ['chakraUiInput'],
  passwordField: ['passwordField'],
  chakraUiCheckbox: ['chakraUiCheckbox'],
  oAuthButtonGroup: ['oAuthButtonGroup'],
  chakraUiHeading: ['chakraUiHeading'],
  divchakraStack: [
    'divchakraStack',
    'divchakraStack2',
    'divchakraStack3',
    'heading2LogInToYourAccount',
    'pchakraText',
    'divcssK7Rgns',
    'divchakraStack4',
    'divchakraStack5',
    'group',
    'labelEmail',
    'input',
    'group2',
    'labelPassword',
    'divchakraInputGroup',
    'input2',
    'buttonRevealPasswordSvg',
    'divchakraStack6',
    'label',
    'spanchakraCheckboxControl',
    'svg2',
    'buttonForgotPassword',
    'divchakraStack7',
    'divchakraStack8',
    'separator',
    'orContinueWith',
    'separator2',
    'button',
    'group3',
    'button2',
    'svg3',
    'frame',
    'img',
    'button3',
    'svg4',
    'button4',
    'svg5',
  ],
  divchakraStack2: [
    'divchakraStack2',
    'divchakraStack3',
    'heading2LogInToYourAccount',
    'pchakraText',
  ],
  divchakraStack3: [
    'divchakraStack3',
    'heading2LogInToYourAccount',
    'pchakraText',
  ],
  heading2LogInToYourAccount: ['heading2LogInToYourAccount'],
  pchakraText: ['pchakraText'],
  divcssK7Rgns: [
    'divcssK7Rgns',
    'divchakraStack4',
    'divchakraStack5',
    'group',
    'labelEmail',
    'input',
    'group2',
    'labelPassword',
    'divchakraInputGroup',
    'input2',
    'buttonRevealPasswordSvg',
    'divchakraStack6',
    'label',
    'spanchakraCheckboxControl',
    'svg2',
    'buttonForgotPassword',
    'divchakraStack7',
    'divchakraStack8',
    'separator',
    'orContinueWith',
    'separator2',
    'button',
    'group3',
    'button2',
    'svg3',
    'frame',
    'img',
    'button3',
    'svg4',
    'button4',
    'svg5',
  ],
  divchakraStack4: [
    'divchakraStack4',
    'divchakraStack5',
    'group',
    'labelEmail',
    'input',
    'group2',
    'labelPassword',
    'divchakraInputGroup',
    'input2',
    'buttonRevealPasswordSvg',
    'divchakraStack6',
    'label',
    'spanchakraCheckboxControl',
    'svg2',
    'buttonForgotPassword',
    'divchakraStack7',
    'divchakraStack8',
    'separator',
    'orContinueWith',
    'separator2',
    'button',
    'group3',
    'button2',
    'svg3',
    'frame',
    'img',
    'button3',
    'svg4',
    'button4',
    'svg5',
  ],
  divchakraStack5: [
    'divchakraStack5',
    'group',
    'labelEmail',
    'input',
    'group2',
    'labelPassword',
    'divchakraInputGroup',
    'input2',
    'buttonRevealPasswordSvg',
  ],
  group: ['group', 'labelEmail', 'input'],
  labelEmail: ['labelEmail'],
  input: ['input'],
  group2: [
    'group2',
    'labelPassword',
    'divchakraInputGroup',
    'input2',
    'buttonRevealPasswordSvg',
  ],
  labelPassword: ['labelPassword'],
  divchakraInputGroup: [
    'divchakraInputGroup',
    'input2',
    'buttonRevealPasswordSvg',
  ],
  input2: ['input2'],
  buttonRevealPasswordSvg: ['buttonRevealPasswordSvg'],
  divchakraStack6: [
    'divchakraStack6',
    'label',
    'spanchakraCheckboxControl',
    'svg2',
    'buttonForgotPassword',
  ],
  label: ['label', 'spanchakraCheckboxControl', 'svg2'],
  spanchakraCheckboxControl: ['spanchakraCheckboxControl', 'svg2'],
  svg2: ['svg2'],
  buttonForgotPassword: ['buttonForgotPassword'],
  divchakraStack7: [
    'divchakraStack7',
    'divchakraStack8',
    'separator',
    'orContinueWith',
    'separator2',
    'button',
    'group3',
    'button2',
    'svg3',
    'frame',
    'img',
    'button3',
    'svg4',
    'button4',
    'svg5',
  ],
  divchakraStack8: [
    'divchakraStack8',
    'separator',
    'orContinueWith',
    'separator2',
  ],
  separator: ['separator'],
  orContinueWith: ['orContinueWith'],
  separator2: ['separator2'],
  button: ['button'],
  group3: [
    'group3',
    'button2',
    'svg3',
    'frame',
    'img',
    'button3',
    'svg4',
    'button4',
    'svg5',
  ],
  button2: ['button2', 'svg3', 'frame', 'img'],
  svg3: ['svg3', 'frame', 'img'],
  frame: ['frame', 'img'],
  img: ['img'],
  button3: ['button3', 'svg4'],
  svg4: ['svg4'],
  button4: ['button4', 'svg5'],
  svg5: ['svg5'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  loginWithCentredForm: typeof LoginWithCentredForm;
  chakraUiContainer: typeof Container;
  logo: typeof Logo;
  chakraUiBox: typeof Box;
  chakraUiFormControl: typeof FormControl;
  chakraUiFormLabel: typeof FormLabel;
  chakraUiInput: typeof Input;
  passwordField: typeof PasswordField;
  chakraUiCheckbox: typeof Checkbox;
  oAuthButtonGroup: typeof OAuthButtonGroup;
  chakraUiHeading: typeof Heading;
  divchakraStack: 'div';
  divchakraStack2: 'div';
  divchakraStack3: 'div';
  heading2LogInToYourAccount: 'div';
  pchakraText: 'div';
  divcssK7Rgns: 'div';
  divchakraStack4: 'div';
  divchakraStack5: 'div';
  group: 'div';
  labelEmail: 'div';
  input: 'div';
  group2: 'div';
  labelPassword: 'div';
  divchakraInputGroup: 'div';
  input2: 'div';
  buttonRevealPasswordSvg: 'div';
  divchakraStack6: 'div';
  label: 'div';
  spanchakraCheckboxControl: 'div';
  svg2: 'div';
  buttonForgotPassword: 'div';
  divchakraStack7: 'div';
  divchakraStack8: 'div';
  separator: 'div';
  orContinueWith: 'div';
  separator2: 'div';
  button: 'div';
  group3: 'div';
  button2: 'div';
  svg3: 'div';
  frame: 'div';
  img: typeof p.PlasmicImg;
  button3: 'div';
  svg4: 'div';
  button4: 'div';
  svg5: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTestRegisteredProps__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTestRegisteredProps__VariantsArgs;
    args?: PlasmicTestRegisteredProps__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTestRegisteredProps__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTestRegisteredProps__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTestRegisteredProps__ArgProps,
          internalVariantPropNames: PlasmicTestRegisteredProps__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicTestRegisteredProps__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicTestRegisteredProps';
  } else {
    func.displayName = `PlasmicTestRegisteredProps.${nodeName}`;
  }
  return func;
}

export const PlasmicTestRegisteredProps = Object.assign(
  // Top-level PlasmicTestRegisteredProps renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    loginWithCentredForm: makeNodeComponent('loginWithCentredForm'),
    chakraUiContainer: makeNodeComponent('chakraUiContainer'),
    logo: makeNodeComponent('logo'),
    chakraUiBox: makeNodeComponent('chakraUiBox'),
    chakraUiFormControl: makeNodeComponent('chakraUiFormControl'),
    chakraUiFormLabel: makeNodeComponent('chakraUiFormLabel'),
    chakraUiInput: makeNodeComponent('chakraUiInput'),
    passwordField: makeNodeComponent('passwordField'),
    chakraUiCheckbox: makeNodeComponent('chakraUiCheckbox'),
    oAuthButtonGroup: makeNodeComponent('oAuthButtonGroup'),
    chakraUiHeading: makeNodeComponent('chakraUiHeading'),
    divchakraStack: makeNodeComponent('divchakraStack'),
    divchakraStack2: makeNodeComponent('divchakraStack2'),
    divchakraStack3: makeNodeComponent('divchakraStack3'),
    heading2LogInToYourAccount: makeNodeComponent('heading2LogInToYourAccount'),
    pchakraText: makeNodeComponent('pchakraText'),
    divcssK7Rgns: makeNodeComponent('divcssK7Rgns'),
    divchakraStack4: makeNodeComponent('divchakraStack4'),
    divchakraStack5: makeNodeComponent('divchakraStack5'),
    group: makeNodeComponent('group'),
    labelEmail: makeNodeComponent('labelEmail'),
    input: makeNodeComponent('input'),
    group2: makeNodeComponent('group2'),
    labelPassword: makeNodeComponent('labelPassword'),
    divchakraInputGroup: makeNodeComponent('divchakraInputGroup'),
    input2: makeNodeComponent('input2'),
    buttonRevealPasswordSvg: makeNodeComponent('buttonRevealPasswordSvg'),
    divchakraStack6: makeNodeComponent('divchakraStack6'),
    label: makeNodeComponent('label'),
    spanchakraCheckboxControl: makeNodeComponent('spanchakraCheckboxControl'),
    svg2: makeNodeComponent('svg2'),
    buttonForgotPassword: makeNodeComponent('buttonForgotPassword'),
    divchakraStack7: makeNodeComponent('divchakraStack7'),
    divchakraStack8: makeNodeComponent('divchakraStack8'),
    separator: makeNodeComponent('separator'),
    orContinueWith: makeNodeComponent('orContinueWith'),
    separator2: makeNodeComponent('separator2'),
    button: makeNodeComponent('button'),
    group3: makeNodeComponent('group3'),
    button2: makeNodeComponent('button2'),
    svg3: makeNodeComponent('svg3'),
    frame: makeNodeComponent('frame'),
    img: makeNodeComponent('img'),
    button3: makeNodeComponent('button3'),
    svg4: makeNodeComponent('svg4'),
    button4: makeNodeComponent('button4'),
    svg5: makeNodeComponent('svg5'),

    // Metadata about props expected for PlasmicTestRegisteredProps
    internalVariantProps: PlasmicTestRegisteredProps__VariantProps,
    internalArgProps: PlasmicTestRegisteredProps__ArgProps,

    // Page metadata
    pageMetadata: {
      title: '',
      description: '',
      ogImageSrc: '',
      canonical: '',
    },
  }
);

export default PlasmicTestRegisteredProps;
/* prettier-ignore-end */
