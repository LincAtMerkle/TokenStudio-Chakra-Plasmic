// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nV7sRTPBx6ecWzFNNAWeQg
// Component: s4za5IjEKLQiTh

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  useDependencyAwareQuery
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Button } from "@chakra-ui/react"; // plasmic-import: v_IlycuEiFdN-/codeComponent
import { ButtonPreview } from "../../custom/ButtonPreview"; // plasmic-import: 9c6OdMLDMrhOJ5/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: Z615tYpfbCCvE/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_poc_localhost.module.css"; // plasmic-import: nV7sRTPBx6ecWzFNNAWeQg/projectcss
import sty from "./PlasmicMarkDownTest.module.css"; // plasmic-import: s4za5IjEKLQiTh/css

export type PlasmicMarkDownTest__VariantMembers = {};
export type PlasmicMarkDownTest__VariantsArgs = {};
type VariantPropType = keyof PlasmicMarkDownTest__VariantsArgs;
export const PlasmicMarkDownTest__VariantProps = new Array<VariantPropType>();

export type PlasmicMarkDownTest__ArgsType = {};
type ArgPropType = keyof PlasmicMarkDownTest__ArgsType;
export const PlasmicMarkDownTest__ArgProps = new Array<ArgPropType>();

export type PlasmicMarkDownTest__OverridesType = {
  root?: p.Flex<"div">;
  buttonPreview?: p.Flex<typeof ButtonPreview>;
  freeBox?: p.Flex<"div">;
};

export interface DefaultMarkDownTestProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMarkDownTest__RenderFunc(props: {
  variants: PlasmicMarkDownTest__VariantsArgs;
  args: PlasmicMarkDownTest__ArgsType;
  overrides: PlasmicMarkDownTest__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  useDependencyAwareQuery({
    name: "query",
    getDataOp: () => ({
      sourceId: "wVh4Kh8KdKUddBmFr7EbJb",
      opId: "b0a292e1-ec19-41a4-9451-d8bf54bc2741",
      userArgs: {},
      cacheKey: "plasmic.$.-levP1Bw9LsgC_.$.",
      invalidatedKeys: ["plasmic_refresh_all"],
      roleId: null
    }),
    $queries,
    setDollarQueries
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Button
            className={classNames("__wab_instance", sty.chakraUiButton___1LP9)}
            variant={"primary1" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rqmbd
              )}
            >
              {"Button"}
            </div>
          </Button>
          <ButtonPreview
            data-plasmic-name={"buttonPreview"}
            data-plasmic-override={overrides.buttonPreview}
            className={classNames("__wab_instance", sty.buttonPreview)}
          />

          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <Button
                className={classNames(
                  "__wab_instance",
                  sty.chakraUiButton__zHvY
                )}
                size={"xl" as const}
                variant={"primary1" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__c4WrT
                  )}
                >
                  {"Button"}
                </div>
              </Button>
              <Button
                className={classNames(
                  "__wab_instance",
                  sty.chakraUiButton__uWrZs
                )}
                size={"sm" as const}
                variant={"primary1" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gghTv
                  )}
                >
                  {"Button"}
                </div>
              </Button>
              <Button
                className={classNames(
                  "__wab_instance",
                  sty.chakraUiButton__n7BEu
                )}
                size={"md" as const}
                variant={"primary1" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ozDCu
                  )}
                >
                  {"Button"}
                </div>
              </Button>
              <Button
                className={classNames(
                  "__wab_instance",
                  sty.chakraUiButton__s0Ji
                )}
                size={"lg" as const}
                variant={"primary1" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uKdj8
                  )}
                >
                  {"Button"}
                </div>
              </Button>
            </p.Stack>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "buttonPreview", "freeBox"],
  buttonPreview: ["buttonPreview"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  buttonPreview: typeof ButtonPreview;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMarkDownTest__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMarkDownTest__VariantsArgs;
    args?: PlasmicMarkDownTest__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMarkDownTest__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMarkDownTest__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMarkDownTest__ArgProps,
          internalVariantPropNames: PlasmicMarkDownTest__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMarkDownTest__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMarkDownTest";
  } else {
    func.displayName = `PlasmicMarkDownTest.${nodeName}`;
  }
  return func;
}

export const PlasmicMarkDownTest = Object.assign(
  // Top-level PlasmicMarkDownTest renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    buttonPreview: makeNodeComponent("buttonPreview"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicMarkDownTest
    internalVariantProps: PlasmicMarkDownTest__VariantProps,
    internalArgProps: PlasmicMarkDownTest__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMarkDownTest;
/* prettier-ignore-end */
