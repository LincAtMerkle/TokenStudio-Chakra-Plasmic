// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nV7sRTPBx6ecWzFNNAWeQg
// Component: Ze4HPnY59P

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Heading } from "@chakra-ui/react"; // plasmic-import: 0G7l8BbhtHSG-/codeComponent
import { GalleryWithVerticalCarousel } from "../../custom/chakraPro/GalleryWithVerticalCarousel"; // plasmic-import: 2qhZmuaFwex-/codeComponent
import { GalleryWithCarousel } from "../../custom/chakraPro/GalleryWithCarousel"; // plasmic-import: nMPK5pqw5_U0/codeComponent
import { GalleryWithHorizontalCarousel } from "../../custom/chakraPro/GalleryWithHorizontalCarousel"; // plasmic-import: EAEwrV52DHmK/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_poc_localhost.module.css"; // plasmic-import: nV7sRTPBx6ecWzFNNAWeQg/projectcss
import sty from "./PlasmicImageGalleries.module.css"; // plasmic-import: Ze4HPnY59P/css

export type PlasmicImageGalleries__VariantMembers = {};
export type PlasmicImageGalleries__VariantsArgs = {};
type VariantPropType = keyof PlasmicImageGalleries__VariantsArgs;
export const PlasmicImageGalleries__VariantProps = new Array<VariantPropType>();

export type PlasmicImageGalleries__ArgsType = {};
type ArgPropType = keyof PlasmicImageGalleries__ArgsType;
export const PlasmicImageGalleries__ArgProps = new Array<ArgPropType>();

export type PlasmicImageGalleries__OverridesType = {
  root?: p.Flex<"div">;
  galleryWithVerticalCarousel?: p.Flex<typeof GalleryWithVerticalCarousel>;
  galleryWithCarousel?: p.Flex<typeof GalleryWithCarousel>;
  galleryWithHorizontalCarousel?: p.Flex<typeof GalleryWithHorizontalCarousel>;
};

export interface DefaultImageGalleriesProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicImageGalleries__RenderFunc(props: {
  variants: PlasmicImageGalleries__VariantsArgs;
  args: PlasmicImageGalleries__ArgsType;
  overrides: PlasmicImageGalleries__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__w9Wn)}
            noOfLines={1 as const}
            size={"4xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mdpNo
              )}
            >
              {"Image Galleries"}
            </div>
          </Heading>
          <Heading
            className={classNames(
              "__wab_instance",
              sty.chakraUiHeading___6Cer0
            )}
            noOfLines={1 as const}
            size={"xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ir0Ri
              )}
            >
              {"Gallery with vertical carousel"}
            </div>
          </Heading>
          <GalleryWithVerticalCarousel
            data-plasmic-name={"galleryWithVerticalCarousel"}
            data-plasmic-override={overrides.galleryWithVerticalCarousel}
            className={classNames(
              "__wab_instance",
              sty.galleryWithVerticalCarousel
            )}
          />

          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__dS8Rw)}
            noOfLines={1 as const}
            size={"xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yzdnY
              )}
            >
              {"Gallery with carousel"}
            </div>
          </Heading>
          <GalleryWithCarousel
            data-plasmic-name={"galleryWithCarousel"}
            data-plasmic-override={overrides.galleryWithCarousel}
            className={classNames("__wab_instance", sty.galleryWithCarousel)}
          />

          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__oi3BV)}
            noOfLines={1 as const}
            size={"xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9Rht
              )}
            >
              {"Gallery with horizontal carousel"}
            </div>
          </Heading>
          <GalleryWithHorizontalCarousel
            data-plasmic-name={"galleryWithHorizontalCarousel"}
            data-plasmic-override={overrides.galleryWithHorizontalCarousel}
            className={classNames(
              "__wab_instance",
              sty.galleryWithHorizontalCarousel
            )}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "galleryWithVerticalCarousel",
    "galleryWithCarousel",
    "galleryWithHorizontalCarousel"
  ],
  galleryWithVerticalCarousel: ["galleryWithVerticalCarousel"],
  galleryWithCarousel: ["galleryWithCarousel"],
  galleryWithHorizontalCarousel: ["galleryWithHorizontalCarousel"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  galleryWithVerticalCarousel: typeof GalleryWithVerticalCarousel;
  galleryWithCarousel: typeof GalleryWithCarousel;
  galleryWithHorizontalCarousel: typeof GalleryWithHorizontalCarousel;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicImageGalleries__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicImageGalleries__VariantsArgs;
    args?: PlasmicImageGalleries__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicImageGalleries__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicImageGalleries__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicImageGalleries__ArgProps,
          internalVariantPropNames: PlasmicImageGalleries__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicImageGalleries__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicImageGalleries";
  } else {
    func.displayName = `PlasmicImageGalleries.${nodeName}`;
  }
  return func;
}

export const PlasmicImageGalleries = Object.assign(
  // Top-level PlasmicImageGalleries renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    galleryWithVerticalCarousel: makeNodeComponent(
      "galleryWithVerticalCarousel"
    ),
    galleryWithCarousel: makeNodeComponent("galleryWithCarousel"),
    galleryWithHorizontalCarousel: makeNodeComponent(
      "galleryWithHorizontalCarousel"
    ),

    // Metadata about props expected for PlasmicImageGalleries
    internalVariantProps: PlasmicImageGalleries__VariantProps,
    internalArgProps: PlasmicImageGalleries__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicImageGalleries;
/* prettier-ignore-end */
