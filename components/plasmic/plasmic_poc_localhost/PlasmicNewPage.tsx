// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nV7sRTPBx6ecWzFNNAWeQg
// Component: cCdM6p60kE

import * as React from 'react';

import Head from 'next/head';
import Link, { LinkProps } from 'next/link';
import { useRouter } from 'next/router';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import { Button } from '@chakra-ui/react'; // plasmic-import: TdxMoalAZRL/codeComponent
import { PricingWithCornerBadge } from '../../chakra/chakraPro/Marketing/Pricing/PricingWithCornerBadge'; // plasmic-import: 2WDaZrTMVftj/codeComponent
import { SignUpForm } from '../../chakra/chakraPro/Application/Authentication/SignUpForm'; // plasmic-import: Ut7HbuGN0AN/codeComponent
import { ShowcaseOnColoredBackground } from '../../chakra/chakraPro/E-Commerce/Category Showcases/registerShowcaseOnColoredBackground'; // plasmic-import: D3aVY6T6ZVuL/codeComponent
import { ShowcaseGrid } from '../../chakra/chakraPro/ShowcaseGrid'; // plasmic-import: 6LCal5Tufm7Z/codeComponent
import { FooterWithFourColumns } from '../../chakra/chakraPro/Marketing/Footers/FooterWithFourColumns'; // plasmic-import: l39wnN4RszoI-9/codeComponent

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_plasmic_poc_localhost.module.css'; // plasmic-import: nV7sRTPBx6ecWzFNNAWeQg/projectcss
import sty from './PlasmicNewPage.module.css'; // plasmic-import: cCdM6p60kE/css

export type PlasmicNewPage__VariantMembers = {};
export type PlasmicNewPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage__VariantsArgs;
export const PlasmicNewPage__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage__ArgsType;
export const PlasmicNewPage__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage__OverridesType = {
  root?: p.Flex<'div'>;
  chakraUiButton?: p.Flex<typeof Button>;
  pricingWithCornerBadge?: p.Flex<typeof PricingWithCornerBadge>;
  text?: p.Flex<'div'>;
  signUpForm?: p.Flex<typeof SignUpForm>;
  showcaseOnColoredBackground?: p.Flex<typeof ShowcaseOnColoredBackground>;
  showcaseGrid?: p.Flex<typeof ShowcaseGrid>;
  footerWithFourColumns?: p.Flex<typeof FooterWithFourColumns>;
};

export interface DefaultNewPageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewPage__RenderFunc(props: {
  variants: PlasmicNewPage__VariantsArgs;
  args: PlasmicNewPage__ArgsType;
  overrides: PlasmicNewPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={'root'}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Button
            data-plasmic-name={'chakraUiButton'}
            data-plasmic-override={overrides.chakraUiButton}
            className={classNames('__wab_instance', sty.chakraUiButton)}
            variant={'primary' as const}
          />

          <PricingWithCornerBadge
            data-plasmic-name={'pricingWithCornerBadge'}
            data-plasmic-override={overrides.pricingWithCornerBadge}
            className={classNames('__wab_instance', sty.pricingWithCornerBadge)}
          />

          <div
            data-plasmic-name={'text'}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            <React.Fragment>
              <span
                className={'plasmic_default__all plasmic_default__span'}
                style={{ color: '#000000' }}
              >
                {'Enter some text'}
              </span>
            </React.Fragment>
          </div>
          <SignUpForm
            data-plasmic-name={'signUpForm'}
            data-plasmic-override={overrides.signUpForm}
            className={classNames('__wab_instance', sty.signUpForm)}
          />

          <ShowcaseOnColoredBackground
            data-plasmic-name={'showcaseOnColoredBackground'}
            data-plasmic-override={overrides.showcaseOnColoredBackground}
            className={classNames(
              '__wab_instance',
              sty.showcaseOnColoredBackground
            )}
          />

          <ShowcaseGrid
            data-plasmic-name={'showcaseGrid'}
            data-plasmic-override={overrides.showcaseGrid}
            className={classNames('__wab_instance', sty.showcaseGrid)}
          />

          <FooterWithFourColumns
            data-plasmic-name={'footerWithFourColumns'}
            data-plasmic-override={overrides.footerWithFourColumns}
            className={classNames('__wab_instance', sty.footerWithFourColumns)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    'root',
    'chakraUiButton',
    'pricingWithCornerBadge',
    'text',
    'signUpForm',
    'showcaseOnColoredBackground',
    'showcaseGrid',
    'footerWithFourColumns',
  ],
  chakraUiButton: ['chakraUiButton'],
  pricingWithCornerBadge: ['pricingWithCornerBadge'],
  text: ['text'],
  signUpForm: ['signUpForm'],
  showcaseOnColoredBackground: ['showcaseOnColoredBackground'],
  showcaseGrid: ['showcaseGrid'],
  footerWithFourColumns: ['footerWithFourColumns'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  chakraUiButton: typeof Button;
  pricingWithCornerBadge: typeof PricingWithCornerBadge;
  text: 'div';
  signUpForm: typeof SignUpForm;
  showcaseOnColoredBackground: typeof ShowcaseOnColoredBackground;
  showcaseGrid: typeof ShowcaseGrid;
  footerWithFourColumns: typeof FooterWithFourColumns;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage__VariantsArgs;
    args?: PlasmicNewPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNewPage__ArgProps,
          internalVariantPropNames: PlasmicNewPage__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicNewPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicNewPage';
  } else {
    func.displayName = `PlasmicNewPage.${nodeName}`;
  }
  return func;
}

export const PlasmicNewPage = Object.assign(
  // Top-level PlasmicNewPage renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    chakraUiButton: makeNodeComponent('chakraUiButton'),
    pricingWithCornerBadge: makeNodeComponent('pricingWithCornerBadge'),
    text: makeNodeComponent('text'),
    signUpForm: makeNodeComponent('signUpForm'),
    showcaseOnColoredBackground: makeNodeComponent(
      'showcaseOnColoredBackground'
    ),
    showcaseGrid: makeNodeComponent('showcaseGrid'),
    footerWithFourColumns: makeNodeComponent('footerWithFourColumns'),

    // Metadata about props expected for PlasmicNewPage
    internalVariantProps: PlasmicNewPage__VariantProps,
    internalArgProps: PlasmicNewPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: '',
      description: '',
      ogImageSrc: '',
      canonical: '',
    },
  }
);

export default PlasmicNewPage;
/* prettier-ignore-end */
