// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nV7sRTPBx6ecWzFNNAWeQg
// Component: t55YN31wdC

import * as React from 'react';

import Head from 'next/head';
import Link, { LinkProps } from 'next/link';
import { useRouter } from 'next/router';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import { Button } from '@chakra-ui/react'; // plasmic-import: TdxMoalAZRL/codeComponent
import { Modifier } from '../../../Modifier'; // plasmic-import: 3LGB7uX5hH/codeComponent

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_plasmic_poc_localhost.module.css'; // plasmic-import: nV7sRTPBx6ecWzFNNAWeQg/projectcss
import sty from './PlasmicNewPage4.module.css'; // plasmic-import: t55YN31wdC/css

export type PlasmicNewPage4__VariantMembers = {};
export type PlasmicNewPage4__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage4__VariantsArgs;
export const PlasmicNewPage4__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage4__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage4__ArgsType;
export const PlasmicNewPage4__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage4__OverridesType = {
  root?: p.Flex<'div'>;
  modifier?: p.Flex<typeof Modifier>;
};

export interface DefaultNewPage4Props {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewPage4__RenderFunc(props: {
  variants: PlasmicNewPage4__VariantsArgs;
  args: PlasmicNewPage4__ArgsType;
  overrides: PlasmicNewPage4__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={'root'}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Button
            className={classNames('__wab_instance', sty.chakraUiButton__fezdg)}
            variant={'primary' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ddFGn
              )}
            >
              {'Button'}
            </div>
          </Button>
          <Modifier
            data-plasmic-name={'modifier'}
            data-plasmic-override={overrides.modifier}
            className={classNames('__wab_instance', sty.modifier)}
            color={'blue' as const}
            type={'casual' as const}
          >
            <Button
              className={classNames('__wab_instance', sty.chakraUiButton__cXLf)}
              variant={'primary' as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lxBv
                )}
              >
                {'Button'}
              </div>
            </Button>
          </Modifier>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'modifier'],
  modifier: ['modifier'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  modifier: typeof Modifier;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage4__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage4__VariantsArgs;
    args?: PlasmicNewPage4__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage4__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewPage4__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNewPage4__ArgProps,
          internalVariantPropNames: PlasmicNewPage4__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicNewPage4__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicNewPage4';
  } else {
    func.displayName = `PlasmicNewPage4.${nodeName}`;
  }
  return func;
}

export const PlasmicNewPage4 = Object.assign(
  // Top-level PlasmicNewPage4 renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    modifier: makeNodeComponent('modifier'),

    // Metadata about props expected for PlasmicNewPage4
    internalVariantProps: PlasmicNewPage4__VariantProps,
    internalArgProps: PlasmicNewPage4__ArgProps,

    // Page metadata
    pageMetadata: {
      title: '',
      description: '',
      ogImageSrc: '',
      canonical: '',
    },
  }
);

export default PlasmicNewPage4;
/* prettier-ignore-end */
