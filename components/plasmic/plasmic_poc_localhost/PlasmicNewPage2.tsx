// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nV7sRTPBx6ecWzFNNAWeQg
// Component: sqlyxp_wme

import * as React from 'react';

import Head from 'next/head';
import Link, { LinkProps } from 'next/link';
import { useRouter } from 'next/router';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_plasmic_poc_localhost.module.css'; // plasmic-import: nV7sRTPBx6ecWzFNNAWeQg/projectcss
import sty from './PlasmicNewPage2.module.css'; // plasmic-import: sqlyxp_wme/css

import Ellipse375Icon from './icons/PlasmicIcon__Ellipse375'; // plasmic-import: 9xVh51gqwV/icon
import ChevronLeftIcon from './icons/PlasmicIcon__ChevronLeft'; // plasmic-import: GQyfM4hTY5/icon
import MerkleLogoIcon from './icons/PlasmicIcon__MerkleLogo'; // plasmic-import: -QA4SrujBO/icon
import _Icon from './icons/PlasmicIcon___'; // plasmic-import: zi_modmcwK/icon
import UtsLogoIcon from './icons/PlasmicIcon__UtsLogo'; // plasmic-import: RuRlU-iWU9/icon
import IconmoreIcon from './icons/PlasmicIcon__Iconmore'; // plasmic-import: 4xWRW3FAFU/icon
import IgLogoIcon from './icons/PlasmicIcon__IgLogo'; // plasmic-import: bZwvglWXj4W/icon
import IconsIcon from './icons/PlasmicIcon__Icons'; // plasmic-import: rAvPBO8T9vi/icon
import Icons2Icon from './icons/PlasmicIcon__Icons2'; // plasmic-import: y-ULGOspJMM/icon
import Icons3Icon from './icons/PlasmicIcon__Icons3'; // plasmic-import: 3PiS4M70_5k/icon
import Line21Icon from './icons/PlasmicIcon__Line21'; // plasmic-import: MXE-Ki3mwlw/icon
import Ellipse81Icon from './icons/PlasmicIcon__Ellipse81'; // plasmic-import: zESWhcsXcT9/icon
import Group8Icon from './icons/PlasmicIcon__Group8'; // plasmic-import: Fxj8CCnF7ZF/icon
import Ellipse77Icon from './icons/PlasmicIcon__Ellipse77'; // plasmic-import: WnGEkTC7uQx/icon
import Group6Icon from './icons/PlasmicIcon__Group6'; // plasmic-import: 3mdfxTHt2m2/icon
import Icons4Icon from './icons/PlasmicIcon__Icons4'; // plasmic-import: KZ6KJlmzIVv/icon
import Icons7Icon from './icons/PlasmicIcon__Icons7'; // plasmic-import: aD_zAa8bWsS/icon
import NotchIcon from './icons/PlasmicIcon__Notch'; // plasmic-import: iV1-81KjXCm/icon
import StatusBarBatteryIcon from './icons/PlasmicIcon__StatusBarBattery'; // plasmic-import: QFx4_HsbFwq/icon
import WifiIcon from './icons/PlasmicIcon__Wifi'; // plasmic-import: N5-zw8T6RmQ/icon
import IconMobileSignalIcon from './icons/PlasmicIcon__IconMobileSignal'; // plasmic-import: vUc8bs2VQCL/icon
import Icons8Icon from './icons/PlasmicIcon__Icons8'; // plasmic-import: UNGmSkTNlLe/icon
import Icons9Icon from './icons/PlasmicIcon__Icons9'; // plasmic-import: ftwIB-Pw5K9/icon
import Polygon1Icon from './icons/PlasmicIcon__Polygon1'; // plasmic-import: OEyKtYYPMih/icon
import Vector13Icon from './icons/PlasmicIcon__Vector13'; // plasmic-import: FEbc5v7oQHE/icon
import Vector12Icon from './icons/PlasmicIcon__Vector12'; // plasmic-import: viX8JQd7UQO/icon
import Group4Icon from './icons/PlasmicIcon__Group4'; // plasmic-import: m8idIfCVqo5/icon
import Ellipse75Icon from './icons/PlasmicIcon__Ellipse75'; // plasmic-import: xygVAgq9Ld0/icon
import DividerIcon from './icons/PlasmicIcon__Divider'; // plasmic-import: MKeYDP7uQuq/icon
import FactIconIcon from './icons/PlasmicIcon__FactIcon'; // plasmic-import: VYlGzItslMY/icon

export type PlasmicNewPage2__VariantMembers = {};
export type PlasmicNewPage2__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage2__VariantsArgs;
export const PlasmicNewPage2__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage2__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage2__ArgsType;
export const PlasmicNewPage2__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage2__OverridesType = {
  root?: p.Flex<'div'>;
  meetSarah?: p.Flex<'div'>;
  frame715?: p.Flex<'div'>;
  frame714?: p.Flex<'div'>;
  navigationButtons?: p.Flex<'div'>;
  component1?: p.Flex<'div'>;
  group714?: p.Flex<'div'>;
  component2?: p.Flex<'div'>;
  group715?: p.Flex<'div'>;
  merkleLockup?: p.Flex<'div'>;
  feedPostSponsored?: p.Flex<'div'>;
  userHeaders?: p.Flex<'div'>;
  icons?: p.Flex<'div'>;
  avatarInfo?: p.Flex<'div'>;
  avatar?: p.Flex<'div'>;
  avatar2?: p.Flex<'div'>;
  replacePhotoHere?: p.Flex<'div'>;
  frame737?: p.Flex<'div'>;
  text2?: p.Flex<'div'>;
  navigationBar?: p.Flex<'div'>;
  logoDropdown?: p.Flex<'div'>;
  icons2?: p.Flex<'div'>;
  icons3?: p.Flex<'div'>;
  rectangle1429?: p.Flex<'div'>;
  post11?: p.Flex<'div'>;
  _032AshleyMatt1?: p.Flex<'div'>;
  postTopDetails?: p.Flex<'div'>;
  carouselChip?: p.Flex<'div'>;
  postBottomDetails?: p.Flex<'div'>;
  tags?: p.Flex<'div'>;
  storyTray?: p.Flex<'div'>;
  storyUser?: p.Flex<'div'>;
  avatar3?: p.Flex<'div'>;
  avatar4?: p.Flex<'div'>;
  replacePhotoHere2?: p.Flex<'div'>;
  button?: p.Flex<'div'>;
  storyUser2?: p.Flex<'div'>;
  avatar5?: p.Flex<'div'>;
  avatar6?: p.Flex<'div'>;
  replacePhotoHere3?: p.Flex<'div'>;
  storyUser3?: p.Flex<'div'>;
  avatar7?: p.Flex<'div'>;
  avatar8?: p.Flex<'div'>;
  replacePhotoHere4?: p.Flex<'div'>;
  storyUser4?: p.Flex<'div'>;
  avatar9?: p.Flex<'div'>;
  avatar10?: p.Flex<'div'>;
  replacePhotoHere5?: p.Flex<'div'>;
  storyUser5?: p.Flex<'div'>;
  avatar11?: p.Flex<'div'>;
  avatar12?: p.Flex<'div'>;
  replacePhotoHere6?: p.Flex<'div'>;
  postInfo?: p.Flex<'div'>;
  sponsorCta?: p.Flex<'div'>;
  ctaCopyHere?: p.Flex<'div'>;
  icons4?: p.Flex<'div'>;
  leftIcons?: p.Flex<'div'>;
  text3?: p.Flex<'div'>;
  _100Likes?: p.Flex<'div'>;
  usernameLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntMore?: p.Flex<'div'>;
  commentSection?: p.Flex<'div'>;
  avatarText?: p.Flex<'div'>;
  avatar13?: p.Flex<'div'>;
  replacePhotoHere7?: p.Flex<'div'>;
  reactions?: p.Flex<'div'>;
  _?: p.Flex<'div'>;
  _2?: p.Flex<'div'>;
  homeIndicator?: p.Flex<'div'>;
  homeIndicator2?: p.Flex<'div'>;
  statusBar?: p.Flex<'div'>;
  leftSide?: p.Flex<'div'>;
  statusBarTime?: p.Flex<'div'>;
  time?: p.Flex<'div'>;
  rightSide?: p.Flex<'div'>;
  navigationBar2?: p.Flex<'div'>;
  icons5?: p.Flex<'div'>;
  rectangle1434?: p.Flex<'div'>;
  icons6?: p.Flex<'div'>;
  avatar14?: p.Flex<'div'>;
  avatar15?: p.Flex<'div'>;
  replacePhotoHere8?: p.Flex<'div'>;
  maskGroup?: p.Flex<'div'>;
  image39?: p.Flex<'div'>;
  initiativesToggle?: p.Flex<'div'>;
  menu?: p.Flex<'div'>;
  rectangle1?: p.Flex<'div'>;
  rectangle2?: p.Flex<'div'>;
};

export interface DefaultNewPage2Props {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewPage2__RenderFunc(props: {
  variants: PlasmicNewPage2__VariantsArgs;
  args: PlasmicNewPage2__ArgsType;
  overrides: PlasmicNewPage2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={'root'}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={'meetSarah'}
            data-plasmic-override={overrides.meetSarah}
            className={classNames(projectcss.all, sty.meetSarah)}
          >
            <p.Stack
              as={'div'}
              data-plasmic-name={'frame715'}
              data-plasmic-override={overrides.frame715}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame715)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3Jm2X
                )}
              >
                {'01 Explore universities'}
              </div>
            </p.Stack>
            <p.Stack
              as={'div'}
              data-plasmic-name={'frame714'}
              data-plasmic-override={overrides.frame714}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame714)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__b8S9P
                )}
              >
                {'Example audience'}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pzdtV
                )}
              >
                {'Meet Sarah, a prospective postgraduate student'}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kp85R
                )}
              >
                {
                  'Sarah studied Bachelor of Engineering at UTS before going into the workforce. She has career goals and now wants to further her career development by looking at postgraduate opportunities and connect with peers and academics. She sees a sponsored post on Instagram from UTS about furthering your career, and taps \u2018Learn more\u2019 to land at uts.edu.au.'
                }
              </div>
            </p.Stack>
            <p.Stack
              as={'div'}
              data-plasmic-name={'navigationButtons'}
              data-plasmic-override={overrides.navigationButtons}
              hasGap={true}
              className={classNames(projectcss.all, sty.navigationButtons)}
            >
              <p.Stack
                as={'div'}
                data-plasmic-name={'component1'}
                data-plasmic-override={overrides.component1}
                hasGap={true}
                className={classNames(projectcss.all, sty.component1)}
              >
                <div
                  data-plasmic-name={'group714'}
                  data-plasmic-override={overrides.group714}
                  className={classNames(projectcss.all, sty.group714)}
                >
                  <Ellipse375Icon
                    className={classNames(projectcss.all, sty.svg__u1Bzc)}
                    role={'img'}
                  />

                  <ChevronLeftIcon
                    className={classNames(projectcss.all, sty.svg__imQtG)}
                    role={'img'}
                  />
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nxTxa
                  )}
                >
                  {'Go back'}
                </div>
              </p.Stack>
              <p.Stack
                as={'div'}
                data-plasmic-name={'component2'}
                data-plasmic-override={overrides.component2}
                hasGap={true}
                className={classNames(projectcss.all, sty.component2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__k4Rd5
                  )}
                >
                  {'Continue'}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__n9Kid)}>
                  <div
                    data-plasmic-name={'group715'}
                    data-plasmic-override={overrides.group715}
                    className={classNames(projectcss.all, sty.group715)}
                  >
                    <Ellipse375Icon
                      className={classNames(projectcss.all, sty.svg__w0ItU)}
                      role={'img'}
                    />

                    <ChevronLeftIcon
                      className={classNames(projectcss.all, sty.svg__k2B2P)}
                      role={'img'}
                    />
                  </div>
                </div>
              </p.Stack>
            </p.Stack>
            <div
              data-plasmic-name={'merkleLockup'}
              data-plasmic-override={overrides.merkleLockup}
              className={classNames(projectcss.all, sty.merkleLockup)}
            >
              <MerkleLogoIcon
                className={classNames(projectcss.all, sty.svg__kffyf)}
                role={'img'}
              />

              <_Icon
                className={classNames(projectcss.all, sty.svg__vaaUd)}
                role={'img'}
              />

              <UtsLogoIcon
                className={classNames(projectcss.all, sty.svg__cmHth)}
                role={'img'}
              />
            </div>
            <div
              data-plasmic-name={'feedPostSponsored'}
              data-plasmic-override={overrides.feedPostSponsored}
              className={classNames(projectcss.all, sty.feedPostSponsored)}
            >
              <div
                data-plasmic-name={'userHeaders'}
                data-plasmic-override={overrides.userHeaders}
                className={classNames(projectcss.all, sty.userHeaders)}
              >
                <div
                  data-plasmic-name={'icons'}
                  data-plasmic-override={overrides.icons}
                  className={classNames(projectcss.all, sty.icons)}
                >
                  <IconmoreIcon
                    className={classNames(projectcss.all, sty.svg___72XmY)}
                    role={'img'}
                  />
                </div>
                <p.Stack
                  as={'div'}
                  data-plasmic-name={'avatarInfo'}
                  data-plasmic-override={overrides.avatarInfo}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.avatarInfo)}
                >
                  <div
                    data-plasmic-name={'avatar'}
                    data-plasmic-override={overrides.avatar}
                    className={classNames(projectcss.all, sty.avatar)}
                  >
                    <div
                      data-plasmic-name={'avatar2'}
                      data-plasmic-override={overrides.avatar2}
                      className={classNames(projectcss.all, sty.avatar2)}
                    >
                      <div
                        data-plasmic-name={'replacePhotoHere'}
                        data-plasmic-override={overrides.replacePhotoHere}
                        className={classNames(
                          projectcss.all,
                          sty.replacePhotoHere
                        )}
                      />
                    </div>
                  </div>
                  <div
                    data-plasmic-name={'frame737'}
                    data-plasmic-override={overrides.frame737}
                    className={classNames(projectcss.all, sty.frame737)}
                  >
                    <p.Stack
                      as={'div'}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__x03Jw)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9MogQ
                        )}
                      >
                        {'utsengage'}
                      </div>
                    </p.Stack>
                    <p.Stack
                      as={'div'}
                      data-plasmic-name={'text2'}
                      data-plasmic-override={overrides.text2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.text2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jyZwp
                        )}
                      >
                        {'Sponsored'}
                      </div>
                    </p.Stack>
                  </div>
                </p.Stack>
              </div>
              <p.Stack
                as={'div'}
                data-plasmic-name={'navigationBar'}
                data-plasmic-override={overrides.navigationBar}
                hasGap={true}
                className={classNames(projectcss.all, sty.navigationBar)}
              >
                <p.Stack
                  as={'div'}
                  data-plasmic-name={'logoDropdown'}
                  data-plasmic-override={overrides.logoDropdown}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.logoDropdown)}
                >
                  <IgLogoIcon
                    className={classNames(projectcss.all, sty.svg___5KvCt)}
                    role={'img'}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__rzDsL)}
                  >
                    <IconsIcon
                      className={classNames(projectcss.all, sty.svg__zCvvO)}
                      role={'img'}
                    />
                  </div>
                </p.Stack>
                <p.Stack
                  as={'div'}
                  data-plasmic-name={'icons2'}
                  data-plasmic-override={overrides.icons2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.icons2)}
                >
                  <Icons2Icon
                    className={classNames(projectcss.all, sty.svg__da4Vm)}
                    role={'img'}
                  />

                  <Icons3Icon
                    className={classNames(projectcss.all, sty.svg__m1Sm1)}
                    role={'img'}
                  />

                  <div
                    data-plasmic-name={'icons3'}
                    data-plasmic-override={overrides.icons3}
                    className={classNames(projectcss.all, sty.icons3)}
                  >
                    <div
                      data-plasmic-name={'rectangle1429'}
                      data-plasmic-override={overrides.rectangle1429}
                      className={classNames(projectcss.all, sty.rectangle1429)}
                    />

                    <Line21Icon
                      className={classNames(projectcss.all, sty.svg___0OxJy)}
                      role={'img'}
                    />

                    <Line21Icon
                      className={classNames(projectcss.all, sty.svg___6Twr9)}
                      role={'img'}
                    />
                  </div>
                </p.Stack>
              </p.Stack>
              <div
                data-plasmic-name={'post11'}
                data-plasmic-override={overrides.post11}
                className={classNames(projectcss.all, sty.post11)}
              >
                <div
                  data-plasmic-name={'_032AshleyMatt1'}
                  data-plasmic-override={overrides._032AshleyMatt1}
                  className={classNames(projectcss.all, sty._032AshleyMatt1)}
                />

                <div
                  data-plasmic-name={'postTopDetails'}
                  data-plasmic-override={overrides.postTopDetails}
                  className={classNames(projectcss.all, sty.postTopDetails)}
                >
                  <p.Stack
                    as={'div'}
                    data-plasmic-name={'carouselChip'}
                    data-plasmic-override={overrides.carouselChip}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.carouselChip)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jLZfk
                      )}
                    >
                      {'1/3'}
                    </div>
                  </p.Stack>
                </div>
                {false ? (
                  <div
                    data-plasmic-name={'postBottomDetails'}
                    data-plasmic-override={overrides.postBottomDetails}
                    className={classNames(
                      projectcss.all,
                      sty.postBottomDetails
                    )}
                  >
                    <div
                      data-plasmic-name={'tags'}
                      data-plasmic-override={overrides.tags}
                      className={classNames(projectcss.all, sty.tags)}
                    >
                      <Ellipse81Icon
                        className={classNames(projectcss.all, sty.svg__jxvr)}
                        role={'img'}
                      />

                      <Group8Icon
                        className={classNames(projectcss.all, sty.svg__ncVgt)}
                        role={'img'}
                      />
                    </div>
                  </div>
                ) : null}
              </div>
              {false ? (
                <p.Stack
                  as={'div'}
                  data-plasmic-name={'storyTray'}
                  data-plasmic-override={overrides.storyTray}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.storyTray)}
                >
                  <div
                    data-plasmic-name={'storyUser'}
                    data-plasmic-override={overrides.storyUser}
                    className={classNames(projectcss.all, sty.storyUser)}
                  >
                    <div
                      data-plasmic-name={'avatar3'}
                      data-plasmic-override={overrides.avatar3}
                      className={classNames(projectcss.all, sty.avatar3)}
                    >
                      <div
                        data-plasmic-name={'avatar4'}
                        data-plasmic-override={overrides.avatar4}
                        className={classNames(projectcss.all, sty.avatar4)}
                      >
                        <div
                          data-plasmic-name={'replacePhotoHere2'}
                          data-plasmic-override={overrides.replacePhotoHere2}
                          className={classNames(
                            projectcss.all,
                            sty.replacePhotoHere2
                          )}
                        />
                      </div>
                      <div
                        data-plasmic-name={'button'}
                        data-plasmic-override={overrides.button}
                        className={classNames(projectcss.all, sty.button)}
                      >
                        <Ellipse77Icon
                          className={classNames(projectcss.all, sty.svg__qs2DZ)}
                          role={'img'}
                        />

                        <Group6Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___7Syfp
                          )}
                          role={'img'}
                        />
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cDa7H
                      )}
                    >
                      {'Ruffles'}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={'storyUser2'}
                    data-plasmic-override={overrides.storyUser2}
                    className={classNames(projectcss.all, sty.storyUser2)}
                  >
                    <div
                      data-plasmic-name={'avatar5'}
                      data-plasmic-override={overrides.avatar5}
                      className={classNames(projectcss.all, sty.avatar5)}
                    >
                      <div
                        data-plasmic-name={'avatar6'}
                        data-plasmic-override={overrides.avatar6}
                        className={classNames(projectcss.all, sty.avatar6)}
                      >
                        <div
                          data-plasmic-name={'replacePhotoHere3'}
                          data-plasmic-override={overrides.replacePhotoHere3}
                          className={classNames(
                            projectcss.all,
                            sty.replacePhotoHere3
                          )}
                        />
                      </div>
                      <p.PlasmicImg
                        alt={''}
                        className={classNames(sty.img__v65Wz)}
                        displayHeight={'72px' as const}
                        displayMaxHeight={'none' as const}
                        displayMaxWidth={'100%' as const}
                        displayMinHeight={'0' as const}
                        displayMinWidth={'0' as const}
                        displayWidth={'72px' as const}
                        loading={'lazy' as const}
                        src={{
                          src: '/plasmic/plasmic_poc_localhost/images/storyRing.svg',
                          fullWidth: 72,
                          fullHeight: 72,
                          aspectRatio: 1,
                        }}
                      />
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zXepi
                      )}
                    >
                      {'sabanok...'}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={'storyUser3'}
                    data-plasmic-override={overrides.storyUser3}
                    className={classNames(projectcss.all, sty.storyUser3)}
                  >
                    <div
                      data-plasmic-name={'avatar7'}
                      data-plasmic-override={overrides.avatar7}
                      className={classNames(projectcss.all, sty.avatar7)}
                    >
                      <div
                        data-plasmic-name={'avatar8'}
                        data-plasmic-override={overrides.avatar8}
                        className={classNames(projectcss.all, sty.avatar8)}
                      >
                        <div
                          data-plasmic-name={'replacePhotoHere4'}
                          data-plasmic-override={overrides.replacePhotoHere4}
                          className={classNames(
                            projectcss.all,
                            sty.replacePhotoHere4
                          )}
                        />
                      </div>
                      <p.PlasmicImg
                        alt={''}
                        className={classNames(sty.img__filId)}
                        displayHeight={'72px' as const}
                        displayMaxHeight={'none' as const}
                        displayMaxWidth={'100%' as const}
                        displayMinHeight={'0' as const}
                        displayMinWidth={'0' as const}
                        displayWidth={'72px' as const}
                        loading={'lazy' as const}
                        src={{
                          src: '/plasmic/plasmic_poc_localhost/images/storyRing2.svg',
                          fullWidth: 72,
                          fullHeight: 72,
                          aspectRatio: 1,
                        }}
                      />
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hXzHw
                      )}
                    >
                      {'blue_bouy'}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={'storyUser4'}
                    data-plasmic-override={overrides.storyUser4}
                    className={classNames(projectcss.all, sty.storyUser4)}
                  >
                    <div
                      data-plasmic-name={'avatar9'}
                      data-plasmic-override={overrides.avatar9}
                      className={classNames(projectcss.all, sty.avatar9)}
                    >
                      <div
                        data-plasmic-name={'avatar10'}
                        data-plasmic-override={overrides.avatar10}
                        className={classNames(projectcss.all, sty.avatar10)}
                      >
                        <div
                          data-plasmic-name={'replacePhotoHere5'}
                          data-plasmic-override={overrides.replacePhotoHere5}
                          className={classNames(
                            projectcss.all,
                            sty.replacePhotoHere5
                          )}
                        />
                      </div>
                      <p.PlasmicImg
                        alt={''}
                        className={classNames(sty.img__o4Z1M)}
                        displayHeight={'72px' as const}
                        displayMaxHeight={'none' as const}
                        displayMaxWidth={'100%' as const}
                        displayMinHeight={'0' as const}
                        displayMinWidth={'0' as const}
                        displayWidth={'72px' as const}
                        loading={'lazy' as const}
                        src={{
                          src: '/plasmic/plasmic_poc_localhost/images/storyRing3.svg',
                          fullWidth: 72,
                          fullHeight: 72,
                          aspectRatio: 1,
                        }}
                      />
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2PdJl
                      )}
                    >
                      {'waggles'}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={'storyUser5'}
                    data-plasmic-override={overrides.storyUser5}
                    className={classNames(projectcss.all, sty.storyUser5)}
                  >
                    <div
                      data-plasmic-name={'avatar11'}
                      data-plasmic-override={overrides.avatar11}
                      className={classNames(projectcss.all, sty.avatar11)}
                    >
                      <div
                        data-plasmic-name={'avatar12'}
                        data-plasmic-override={overrides.avatar12}
                        className={classNames(projectcss.all, sty.avatar12)}
                      >
                        <div
                          data-plasmic-name={'replacePhotoHere6'}
                          data-plasmic-override={overrides.replacePhotoHere6}
                          className={classNames(
                            projectcss.all,
                            sty.replacePhotoHere6
                          )}
                        />
                      </div>
                      <p.PlasmicImg
                        alt={''}
                        className={classNames(sty.img___54XZu)}
                        displayHeight={'72px' as const}
                        displayMaxHeight={'none' as const}
                        displayMaxWidth={'100%' as const}
                        displayMinHeight={'0' as const}
                        displayMinWidth={'0' as const}
                        displayWidth={'72px' as const}
                        loading={'lazy' as const}
                        src={{
                          src: '/plasmic/plasmic_poc_localhost/images/storyRing4.svg',
                          fullWidth: 72,
                          fullHeight: 72,
                          aspectRatio: 1,
                        }}
                      />
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cEh1
                      )}
                    >
                      {'steve.loves'}
                    </div>
                  </div>
                </p.Stack>
              ) : null}
              <div
                data-plasmic-name={'postInfo'}
                data-plasmic-override={overrides.postInfo}
                className={classNames(projectcss.all, sty.postInfo)}
              >
                <p.Stack
                  as={'div'}
                  data-plasmic-name={'sponsorCta'}
                  data-plasmic-override={overrides.sponsorCta}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.sponsorCta)}
                >
                  <div
                    data-plasmic-name={'ctaCopyHere'}
                    data-plasmic-override={overrides.ctaCopyHere}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.ctaCopyHere
                    )}
                  >
                    {'Learn more'}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__clPz)}
                  >
                    <Icons4Icon
                      className={classNames(projectcss.all, sty.svg__abttx)}
                      role={'img'}
                    />
                  </div>
                </p.Stack>
                <div
                  data-plasmic-name={'icons4'}
                  data-plasmic-override={overrides.icons4}
                  className={classNames(projectcss.all, sty.icons4)}
                >
                  <p.Stack
                    as={'div'}
                    data-plasmic-name={'leftIcons'}
                    data-plasmic-override={overrides.leftIcons}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.leftIcons)}
                  >
                    <Icons2Icon
                      className={classNames(projectcss.all, sty.svg__sVlXx)}
                      role={'img'}
                    />

                    <p.PlasmicImg
                      alt={''}
                      className={classNames(sty.img__a2EV)}
                      displayHeight={'24px' as const}
                      displayMaxHeight={'none' as const}
                      displayMaxWidth={'100%' as const}
                      displayMinHeight={'0' as const}
                      displayMinWidth={'0' as const}
                      displayWidth={'24px' as const}
                      loading={'lazy' as const}
                      src={{
                        src: '/plasmic/plasmic_poc_localhost/images/icons5.svg',
                        fullWidth: 24,
                        fullHeight: 24,
                        aspectRatio: 1,
                      }}
                    />

                    <p.PlasmicImg
                      alt={''}
                      className={classNames(sty.img__htB1M)}
                      displayHeight={'24px' as const}
                      displayMaxHeight={'none' as const}
                      displayMaxWidth={'100%' as const}
                      displayMinHeight={'0' as const}
                      displayMinWidth={'0' as const}
                      displayWidth={'24px' as const}
                      loading={'lazy' as const}
                      src={{
                        src: '/plasmic/plasmic_poc_localhost/images/icons6.svg',
                        fullWidth: 24,
                        fullHeight: 24,
                        aspectRatio: 1,
                      }}
                    />
                  </p.Stack>
                  <Icons7Icon
                    className={classNames(projectcss.all, sty.svg__yF49V)}
                    role={'img'}
                  />
                </div>
                <p.Stack
                  as={'div'}
                  data-plasmic-name={'text3'}
                  data-plasmic-override={overrides.text3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.text3)}
                >
                  <div
                    data-plasmic-name={'_100Likes'}
                    data-plasmic-override={overrides._100Likes}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty._100Likes
                    )}
                  >
                    {'97 Likes'}
                  </div>
                  <div
                    data-plasmic-name={
                      'usernameLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntMore'
                    }
                    data-plasmic-override={
                      overrides.usernameLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntMore
                    }
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.usernameLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntMore
                    )}
                  >
                    {
                      'utsengage Advance your career or deepen your technical skills, by studying a Postgraduate course at UTS.'
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__y9MZk
                    )}
                  >
                    {'View all 16 comments'}
                  </div>
                  <p.Stack
                    as={'div'}
                    data-plasmic-name={'commentSection'}
                    data-plasmic-override={overrides.commentSection}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.commentSection)}
                  >
                    <p.Stack
                      as={'div'}
                      data-plasmic-name={'avatarText'}
                      data-plasmic-override={overrides.avatarText}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.avatarText)}
                    >
                      <div
                        data-plasmic-name={'avatar13'}
                        data-plasmic-override={overrides.avatar13}
                        className={classNames(projectcss.all, sty.avatar13)}
                      >
                        <div
                          data-plasmic-name={'replacePhotoHere7'}
                          data-plasmic-override={overrides.replacePhotoHere7}
                          className={classNames(
                            projectcss.all,
                            sty.replacePhotoHere7
                          )}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jOhU
                        )}
                      >
                        {'Add a comment...'}
                      </div>
                    </p.Stack>
                    <p.Stack
                      as={'div'}
                      data-plasmic-name={'reactions'}
                      data-plasmic-override={overrides.reactions}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.reactions)}
                    >
                      <div
                        data-plasmic-name={'_'}
                        data-plasmic-override={overrides._}
                        className={classNames(projectcss.all, sty._)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pCgvi
                          )}
                        >
                          {'\u2764\ufe0f'}
                        </div>
                      </div>
                      <div
                        data-plasmic-name={'_2'}
                        data-plasmic-override={overrides._2}
                        className={classNames(projectcss.all, sty._2)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hTyqZ
                          )}
                        >
                          {'\ud83d\ude4c'}
                        </div>
                      </div>
                      <p.PlasmicImg
                        alt={''}
                        className={classNames(sty.img__ooFqS)}
                        displayHeight={'12px' as const}
                        displayMaxHeight={'none' as const}
                        displayMaxWidth={'100%' as const}
                        displayMinHeight={'0' as const}
                        displayMinWidth={'0' as const}
                        displayWidth={'12px' as const}
                        loading={'lazy' as const}
                        src={{
                          src: '/plasmic/plasmic_poc_localhost/images/addReactionsButton.svg',
                          fullWidth: 12,
                          fullHeight: 12,
                          aspectRatio: 1,
                        }}
                      />
                    </p.Stack>
                  </p.Stack>
                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__v13Ch
                      )}
                    >
                      {'30 minutes ago'}
                    </div>
                  ) : null}
                </p.Stack>
              </div>
              <div
                data-plasmic-name={'homeIndicator'}
                data-plasmic-override={overrides.homeIndicator}
                className={classNames(projectcss.all, sty.homeIndicator)}
              >
                <div
                  data-plasmic-name={'homeIndicator2'}
                  data-plasmic-override={overrides.homeIndicator2}
                  className={classNames(projectcss.all, sty.homeIndicator2)}
                />
              </div>
              <div
                data-plasmic-name={'statusBar'}
                data-plasmic-override={overrides.statusBar}
                className={classNames(projectcss.all, sty.statusBar)}
              >
                {false ? (
                  <NotchIcon
                    className={classNames(projectcss.all, sty.svg__mR4N)}
                    role={'img'}
                  />
                ) : null}
                <div
                  data-plasmic-name={'leftSide'}
                  data-plasmic-override={overrides.leftSide}
                  className={classNames(projectcss.all, sty.leftSide)}
                >
                  <div
                    data-plasmic-name={'statusBarTime'}
                    data-plasmic-override={overrides.statusBarTime}
                    className={classNames(projectcss.all, sty.statusBarTime)}
                  >
                    <div
                      data-plasmic-name={'time'}
                      data-plasmic-override={overrides.time}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.time
                      )}
                    >
                      {'9:41'}
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={'rightSide'}
                  data-plasmic-override={overrides.rightSide}
                  className={classNames(projectcss.all, sty.rightSide)}
                >
                  <StatusBarBatteryIcon
                    className={classNames(projectcss.all, sty.svg__mloPz)}
                    role={'img'}
                  />

                  <WifiIcon
                    className={classNames(projectcss.all, sty.svg__pry1V)}
                    role={'img'}
                  />

                  <IconMobileSignalIcon
                    className={classNames(projectcss.all, sty.svg___7Fx65)}
                    role={'img'}
                  />
                </div>
              </div>
              <div
                data-plasmic-name={'navigationBar2'}
                data-plasmic-override={overrides.navigationBar2}
                className={classNames(projectcss.all, sty.navigationBar2)}
              >
                <Icons8Icon
                  className={classNames(projectcss.all, sty.svg__yCgo2)}
                  role={'img'}
                />

                <Icons9Icon
                  className={classNames(projectcss.all, sty.svg__l6ShX)}
                  role={'img'}
                />

                <div
                  data-plasmic-name={'icons5'}
                  data-plasmic-override={overrides.icons5}
                  className={classNames(projectcss.all, sty.icons5)}
                >
                  <Polygon1Icon
                    className={classNames(projectcss.all, sty.svg__obyTq)}
                    role={'img'}
                  />

                  <Vector13Icon
                    className={classNames(projectcss.all, sty.svg___2JFjY)}
                    role={'img'}
                  />

                  <Vector13Icon
                    className={classNames(projectcss.all, sty.svg__reLQo)}
                    role={'img'}
                  />

                  <div
                    data-plasmic-name={'rectangle1434'}
                    data-plasmic-override={overrides.rectangle1434}
                    className={classNames(projectcss.all, sty.rectangle1434)}
                  />

                  <Vector12Icon
                    className={classNames(projectcss.all, sty.svg__nw9G5)}
                    role={'img'}
                  />
                </div>
                <div
                  data-plasmic-name={'icons6'}
                  data-plasmic-override={overrides.icons6}
                  className={classNames(projectcss.all, sty.icons6)}
                >
                  <Group4Icon
                    className={classNames(projectcss.all, sty.svg__gTqEn)}
                    role={'img'}
                  />
                </div>
                <p.Stack
                  as={'div'}
                  data-plasmic-name={'avatar14'}
                  data-plasmic-override={overrides.avatar14}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.avatar14)}
                >
                  <div
                    data-plasmic-name={'avatar15'}
                    data-plasmic-override={overrides.avatar15}
                    className={classNames(projectcss.all, sty.avatar15)}
                  >
                    <div
                      data-plasmic-name={'replacePhotoHere8'}
                      data-plasmic-override={overrides.replacePhotoHere8}
                      className={classNames(
                        projectcss.all,
                        sty.replacePhotoHere8
                      )}
                    />
                  </div>
                  <Ellipse75Icon
                    className={classNames(projectcss.all, sty.svg__uSfNo)}
                    role={'img'}
                  />
                </p.Stack>
                <DividerIcon
                  className={classNames(projectcss.all, sty.svg__u8Z5)}
                  role={'img'}
                />
              </div>
            </div>
            <div
              data-plasmic-name={'maskGroup'}
              data-plasmic-override={overrides.maskGroup}
              className={classNames(projectcss.all, sty.maskGroup)}
            >
              <div
                data-plasmic-name={'image39'}
                data-plasmic-override={overrides.image39}
                className={classNames(projectcss.all, sty.image39)}
              />
            </div>
            <p.Stack
              as={'div'}
              data-plasmic-name={'initiativesToggle'}
              data-plasmic-override={overrides.initiativesToggle}
              hasGap={true}
              className={classNames(projectcss.all, sty.initiativesToggle)}
            >
              <FactIconIcon
                className={classNames(projectcss.all, sty.svg__rCMei)}
                role={'img'}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6WI1K
                )}
              >
                {'See required initiatives'}
              </div>
            </p.Stack>
            <div
              data-plasmic-name={'menu'}
              data-plasmic-override={overrides.menu}
              className={classNames(projectcss.all, sty.menu)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dXuVz
                )}
              >
                {'Jump to section'}
              </div>
              <div
                data-plasmic-name={'rectangle1'}
                data-plasmic-override={overrides.rectangle1}
                className={classNames(projectcss.all, sty.rectangle1)}
              />

              <div
                data-plasmic-name={'rectangle2'}
                data-plasmic-override={overrides.rectangle2}
                className={classNames(projectcss.all, sty.rectangle2)}
              />
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    'root',
    'meetSarah',
    'frame715',
    'frame714',
    'navigationButtons',
    'component1',
    'group714',
    'component2',
    'group715',
    'merkleLockup',
    'feedPostSponsored',
    'userHeaders',
    'icons',
    'avatarInfo',
    'avatar',
    'avatar2',
    'replacePhotoHere',
    'frame737',
    'text2',
    'navigationBar',
    'logoDropdown',
    'icons2',
    'icons3',
    'rectangle1429',
    'post11',
    '_032AshleyMatt1',
    'postTopDetails',
    'carouselChip',
    'postBottomDetails',
    'tags',
    'storyTray',
    'storyUser',
    'avatar3',
    'avatar4',
    'replacePhotoHere2',
    'button',
    'storyUser2',
    'avatar5',
    'avatar6',
    'replacePhotoHere3',
    'storyUser3',
    'avatar7',
    'avatar8',
    'replacePhotoHere4',
    'storyUser4',
    'avatar9',
    'avatar10',
    'replacePhotoHere5',
    'storyUser5',
    'avatar11',
    'avatar12',
    'replacePhotoHere6',
    'postInfo',
    'sponsorCta',
    'ctaCopyHere',
    'icons4',
    'leftIcons',
    'text3',
    '_100Likes',
    'usernameLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntMore',
    'commentSection',
    'avatarText',
    'avatar13',
    'replacePhotoHere7',
    'reactions',
    '_',
    '_2',
    'homeIndicator',
    'homeIndicator2',
    'statusBar',
    'leftSide',
    'statusBarTime',
    'time',
    'rightSide',
    'navigationBar2',
    'icons5',
    'rectangle1434',
    'icons6',
    'avatar14',
    'avatar15',
    'replacePhotoHere8',
    'maskGroup',
    'image39',
    'initiativesToggle',
    'menu',
    'rectangle1',
    'rectangle2',
  ],
  meetSarah: [
    'meetSarah',
    'frame715',
    'frame714',
    'navigationButtons',
    'component1',
    'group714',
    'component2',
    'group715',
    'merkleLockup',
    'feedPostSponsored',
    'userHeaders',
    'icons',
    'avatarInfo',
    'avatar',
    'avatar2',
    'replacePhotoHere',
    'frame737',
    'text2',
    'navigationBar',
    'logoDropdown',
    'icons2',
    'icons3',
    'rectangle1429',
    'post11',
    '_032AshleyMatt1',
    'postTopDetails',
    'carouselChip',
    'postBottomDetails',
    'tags',
    'storyTray',
    'storyUser',
    'avatar3',
    'avatar4',
    'replacePhotoHere2',
    'button',
    'storyUser2',
    'avatar5',
    'avatar6',
    'replacePhotoHere3',
    'storyUser3',
    'avatar7',
    'avatar8',
    'replacePhotoHere4',
    'storyUser4',
    'avatar9',
    'avatar10',
    'replacePhotoHere5',
    'storyUser5',
    'avatar11',
    'avatar12',
    'replacePhotoHere6',
    'postInfo',
    'sponsorCta',
    'ctaCopyHere',
    'icons4',
    'leftIcons',
    'text3',
    '_100Likes',
    'usernameLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntMore',
    'commentSection',
    'avatarText',
    'avatar13',
    'replacePhotoHere7',
    'reactions',
    '_',
    '_2',
    'homeIndicator',
    'homeIndicator2',
    'statusBar',
    'leftSide',
    'statusBarTime',
    'time',
    'rightSide',
    'navigationBar2',
    'icons5',
    'rectangle1434',
    'icons6',
    'avatar14',
    'avatar15',
    'replacePhotoHere8',
    'maskGroup',
    'image39',
    'initiativesToggle',
    'menu',
    'rectangle1',
    'rectangle2',
  ],
  frame715: ['frame715'],
  frame714: ['frame714'],
  navigationButtons: [
    'navigationButtons',
    'component1',
    'group714',
    'component2',
    'group715',
  ],
  component1: ['component1', 'group714'],
  group714: ['group714'],
  component2: ['component2', 'group715'],
  group715: ['group715'],
  merkleLockup: ['merkleLockup'],
  feedPostSponsored: [
    'feedPostSponsored',
    'userHeaders',
    'icons',
    'avatarInfo',
    'avatar',
    'avatar2',
    'replacePhotoHere',
    'frame737',
    'text2',
    'navigationBar',
    'logoDropdown',
    'icons2',
    'icons3',
    'rectangle1429',
    'post11',
    '_032AshleyMatt1',
    'postTopDetails',
    'carouselChip',
    'postBottomDetails',
    'tags',
    'storyTray',
    'storyUser',
    'avatar3',
    'avatar4',
    'replacePhotoHere2',
    'button',
    'storyUser2',
    'avatar5',
    'avatar6',
    'replacePhotoHere3',
    'storyUser3',
    'avatar7',
    'avatar8',
    'replacePhotoHere4',
    'storyUser4',
    'avatar9',
    'avatar10',
    'replacePhotoHere5',
    'storyUser5',
    'avatar11',
    'avatar12',
    'replacePhotoHere6',
    'postInfo',
    'sponsorCta',
    'ctaCopyHere',
    'icons4',
    'leftIcons',
    'text3',
    '_100Likes',
    'usernameLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntMore',
    'commentSection',
    'avatarText',
    'avatar13',
    'replacePhotoHere7',
    'reactions',
    '_',
    '_2',
    'homeIndicator',
    'homeIndicator2',
    'statusBar',
    'leftSide',
    'statusBarTime',
    'time',
    'rightSide',
    'navigationBar2',
    'icons5',
    'rectangle1434',
    'icons6',
    'avatar14',
    'avatar15',
    'replacePhotoHere8',
  ],
  userHeaders: [
    'userHeaders',
    'icons',
    'avatarInfo',
    'avatar',
    'avatar2',
    'replacePhotoHere',
    'frame737',
    'text2',
  ],
  icons: ['icons'],
  avatarInfo: [
    'avatarInfo',
    'avatar',
    'avatar2',
    'replacePhotoHere',
    'frame737',
    'text2',
  ],
  avatar: ['avatar', 'avatar2', 'replacePhotoHere'],
  avatar2: ['avatar2', 'replacePhotoHere'],
  replacePhotoHere: ['replacePhotoHere'],
  frame737: ['frame737', 'text2'],
  text2: ['text2'],
  navigationBar: [
    'navigationBar',
    'logoDropdown',
    'icons2',
    'icons3',
    'rectangle1429',
  ],
  logoDropdown: ['logoDropdown'],
  icons2: ['icons2', 'icons3', 'rectangle1429'],
  icons3: ['icons3', 'rectangle1429'],
  rectangle1429: ['rectangle1429'],
  post11: [
    'post11',
    '_032AshleyMatt1',
    'postTopDetails',
    'carouselChip',
    'postBottomDetails',
    'tags',
  ],
  _032AshleyMatt1: ['_032AshleyMatt1'],
  postTopDetails: ['postTopDetails', 'carouselChip'],
  carouselChip: ['carouselChip'],
  postBottomDetails: ['postBottomDetails', 'tags'],
  tags: ['tags'],
  storyTray: [
    'storyTray',
    'storyUser',
    'avatar3',
    'avatar4',
    'replacePhotoHere2',
    'button',
    'storyUser2',
    'avatar5',
    'avatar6',
    'replacePhotoHere3',
    'storyUser3',
    'avatar7',
    'avatar8',
    'replacePhotoHere4',
    'storyUser4',
    'avatar9',
    'avatar10',
    'replacePhotoHere5',
    'storyUser5',
    'avatar11',
    'avatar12',
    'replacePhotoHere6',
  ],
  storyUser: ['storyUser', 'avatar3', 'avatar4', 'replacePhotoHere2', 'button'],
  avatar3: ['avatar3', 'avatar4', 'replacePhotoHere2', 'button'],
  avatar4: ['avatar4', 'replacePhotoHere2'],
  replacePhotoHere2: ['replacePhotoHere2'],
  button: ['button'],
  storyUser2: ['storyUser2', 'avatar5', 'avatar6', 'replacePhotoHere3'],
  avatar5: ['avatar5', 'avatar6', 'replacePhotoHere3'],
  avatar6: ['avatar6', 'replacePhotoHere3'],
  replacePhotoHere3: ['replacePhotoHere3'],
  storyUser3: ['storyUser3', 'avatar7', 'avatar8', 'replacePhotoHere4'],
  avatar7: ['avatar7', 'avatar8', 'replacePhotoHere4'],
  avatar8: ['avatar8', 'replacePhotoHere4'],
  replacePhotoHere4: ['replacePhotoHere4'],
  storyUser4: ['storyUser4', 'avatar9', 'avatar10', 'replacePhotoHere5'],
  avatar9: ['avatar9', 'avatar10', 'replacePhotoHere5'],
  avatar10: ['avatar10', 'replacePhotoHere5'],
  replacePhotoHere5: ['replacePhotoHere5'],
  storyUser5: ['storyUser5', 'avatar11', 'avatar12', 'replacePhotoHere6'],
  avatar11: ['avatar11', 'avatar12', 'replacePhotoHere6'],
  avatar12: ['avatar12', 'replacePhotoHere6'],
  replacePhotoHere6: ['replacePhotoHere6'],
  postInfo: [
    'postInfo',
    'sponsorCta',
    'ctaCopyHere',
    'icons4',
    'leftIcons',
    'text3',
    '_100Likes',
    'usernameLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntMore',
    'commentSection',
    'avatarText',
    'avatar13',
    'replacePhotoHere7',
    'reactions',
    '_',
    '_2',
  ],
  sponsorCta: ['sponsorCta', 'ctaCopyHere'],
  ctaCopyHere: ['ctaCopyHere'],
  icons4: ['icons4', 'leftIcons'],
  leftIcons: ['leftIcons'],
  text3: [
    'text3',
    '_100Likes',
    'usernameLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntMore',
    'commentSection',
    'avatarText',
    'avatar13',
    'replacePhotoHere7',
    'reactions',
    '_',
    '_2',
  ],
  _100Likes: ['_100Likes'],
  usernameLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntMore:
    [
      'usernameLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntMore',
    ],
  commentSection: [
    'commentSection',
    'avatarText',
    'avatar13',
    'replacePhotoHere7',
    'reactions',
    '_',
    '_2',
  ],
  avatarText: ['avatarText', 'avatar13', 'replacePhotoHere7'],
  avatar13: ['avatar13', 'replacePhotoHere7'],
  replacePhotoHere7: ['replacePhotoHere7'],
  reactions: ['reactions', '_', '_2'],
  _: ['_'],
  _2: ['_2'],
  homeIndicator: ['homeIndicator', 'homeIndicator2'],
  homeIndicator2: ['homeIndicator2'],
  statusBar: ['statusBar', 'leftSide', 'statusBarTime', 'time', 'rightSide'],
  leftSide: ['leftSide', 'statusBarTime', 'time'],
  statusBarTime: ['statusBarTime', 'time'],
  time: ['time'],
  rightSide: ['rightSide'],
  navigationBar2: [
    'navigationBar2',
    'icons5',
    'rectangle1434',
    'icons6',
    'avatar14',
    'avatar15',
    'replacePhotoHere8',
  ],
  icons5: ['icons5', 'rectangle1434'],
  rectangle1434: ['rectangle1434'],
  icons6: ['icons6'],
  avatar14: ['avatar14', 'avatar15', 'replacePhotoHere8'],
  avatar15: ['avatar15', 'replacePhotoHere8'],
  replacePhotoHere8: ['replacePhotoHere8'],
  maskGroup: ['maskGroup', 'image39'],
  image39: ['image39'],
  initiativesToggle: ['initiativesToggle'],
  menu: ['menu', 'rectangle1', 'rectangle2'],
  rectangle1: ['rectangle1'],
  rectangle2: ['rectangle2'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  meetSarah: 'div';
  frame715: 'div';
  frame714: 'div';
  navigationButtons: 'div';
  component1: 'div';
  group714: 'div';
  component2: 'div';
  group715: 'div';
  merkleLockup: 'div';
  feedPostSponsored: 'div';
  userHeaders: 'div';
  icons: 'div';
  avatarInfo: 'div';
  avatar: 'div';
  avatar2: 'div';
  replacePhotoHere: 'div';
  frame737: 'div';
  text2: 'div';
  navigationBar: 'div';
  logoDropdown: 'div';
  icons2: 'div';
  icons3: 'div';
  rectangle1429: 'div';
  post11: 'div';
  _032AshleyMatt1: 'div';
  postTopDetails: 'div';
  carouselChip: 'div';
  postBottomDetails: 'div';
  tags: 'div';
  storyTray: 'div';
  storyUser: 'div';
  avatar3: 'div';
  avatar4: 'div';
  replacePhotoHere2: 'div';
  button: 'div';
  storyUser2: 'div';
  avatar5: 'div';
  avatar6: 'div';
  replacePhotoHere3: 'div';
  storyUser3: 'div';
  avatar7: 'div';
  avatar8: 'div';
  replacePhotoHere4: 'div';
  storyUser4: 'div';
  avatar9: 'div';
  avatar10: 'div';
  replacePhotoHere5: 'div';
  storyUser5: 'div';
  avatar11: 'div';
  avatar12: 'div';
  replacePhotoHere6: 'div';
  postInfo: 'div';
  sponsorCta: 'div';
  ctaCopyHere: 'div';
  icons4: 'div';
  leftIcons: 'div';
  text3: 'div';
  _100Likes: 'div';
  usernameLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntMore: 'div';
  commentSection: 'div';
  avatarText: 'div';
  avatar13: 'div';
  replacePhotoHere7: 'div';
  reactions: 'div';
  _: 'div';
  _2: 'div';
  homeIndicator: 'div';
  homeIndicator2: 'div';
  statusBar: 'div';
  leftSide: 'div';
  statusBarTime: 'div';
  time: 'div';
  rightSide: 'div';
  navigationBar2: 'div';
  icons5: 'div';
  rectangle1434: 'div';
  icons6: 'div';
  avatar14: 'div';
  avatar15: 'div';
  replacePhotoHere8: 'div';
  maskGroup: 'div';
  image39: 'div';
  initiativesToggle: 'div';
  menu: 'div';
  rectangle1: 'div';
  rectangle2: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage2__VariantsArgs;
    args?: PlasmicNewPage2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewPage2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNewPage2__ArgProps,
          internalVariantPropNames: PlasmicNewPage2__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicNewPage2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicNewPage2';
  } else {
    func.displayName = `PlasmicNewPage2.${nodeName}`;
  }
  return func;
}

export const PlasmicNewPage2 = Object.assign(
  // Top-level PlasmicNewPage2 renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    meetSarah: makeNodeComponent('meetSarah'),
    frame715: makeNodeComponent('frame715'),
    frame714: makeNodeComponent('frame714'),
    navigationButtons: makeNodeComponent('navigationButtons'),
    component1: makeNodeComponent('component1'),
    group714: makeNodeComponent('group714'),
    component2: makeNodeComponent('component2'),
    group715: makeNodeComponent('group715'),
    merkleLockup: makeNodeComponent('merkleLockup'),
    feedPostSponsored: makeNodeComponent('feedPostSponsored'),
    userHeaders: makeNodeComponent('userHeaders'),
    icons: makeNodeComponent('icons'),
    avatarInfo: makeNodeComponent('avatarInfo'),
    avatar: makeNodeComponent('avatar'),
    avatar2: makeNodeComponent('avatar2'),
    replacePhotoHere: makeNodeComponent('replacePhotoHere'),
    frame737: makeNodeComponent('frame737'),
    text2: makeNodeComponent('text2'),
    navigationBar: makeNodeComponent('navigationBar'),
    logoDropdown: makeNodeComponent('logoDropdown'),
    icons2: makeNodeComponent('icons2'),
    icons3: makeNodeComponent('icons3'),
    rectangle1429: makeNodeComponent('rectangle1429'),
    post11: makeNodeComponent('post11'),
    _032AshleyMatt1: makeNodeComponent('_032AshleyMatt1'),
    postTopDetails: makeNodeComponent('postTopDetails'),
    carouselChip: makeNodeComponent('carouselChip'),
    postBottomDetails: makeNodeComponent('postBottomDetails'),
    tags: makeNodeComponent('tags'),
    storyTray: makeNodeComponent('storyTray'),
    storyUser: makeNodeComponent('storyUser'),
    avatar3: makeNodeComponent('avatar3'),
    avatar4: makeNodeComponent('avatar4'),
    replacePhotoHere2: makeNodeComponent('replacePhotoHere2'),
    button: makeNodeComponent('button'),
    storyUser2: makeNodeComponent('storyUser2'),
    avatar5: makeNodeComponent('avatar5'),
    avatar6: makeNodeComponent('avatar6'),
    replacePhotoHere3: makeNodeComponent('replacePhotoHere3'),
    storyUser3: makeNodeComponent('storyUser3'),
    avatar7: makeNodeComponent('avatar7'),
    avatar8: makeNodeComponent('avatar8'),
    replacePhotoHere4: makeNodeComponent('replacePhotoHere4'),
    storyUser4: makeNodeComponent('storyUser4'),
    avatar9: makeNodeComponent('avatar9'),
    avatar10: makeNodeComponent('avatar10'),
    replacePhotoHere5: makeNodeComponent('replacePhotoHere5'),
    storyUser5: makeNodeComponent('storyUser5'),
    avatar11: makeNodeComponent('avatar11'),
    avatar12: makeNodeComponent('avatar12'),
    replacePhotoHere6: makeNodeComponent('replacePhotoHere6'),
    postInfo: makeNodeComponent('postInfo'),
    sponsorCta: makeNodeComponent('sponsorCta'),
    ctaCopyHere: makeNodeComponent('ctaCopyHere'),
    icons4: makeNodeComponent('icons4'),
    leftIcons: makeNodeComponent('leftIcons'),
    text3: makeNodeComponent('text3'),
    _100Likes: makeNodeComponent('_100Likes'),
    usernameLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntMore:
      makeNodeComponent(
        'usernameLoremIpsumDolorSitAmetConsecteturAdipiscingElitSedDoEiusmodTemporIncididuntMore'
      ),
    commentSection: makeNodeComponent('commentSection'),
    avatarText: makeNodeComponent('avatarText'),
    avatar13: makeNodeComponent('avatar13'),
    replacePhotoHere7: makeNodeComponent('replacePhotoHere7'),
    reactions: makeNodeComponent('reactions'),
    _: makeNodeComponent('_'),
    _2: makeNodeComponent('_2'),
    homeIndicator: makeNodeComponent('homeIndicator'),
    homeIndicator2: makeNodeComponent('homeIndicator2'),
    statusBar: makeNodeComponent('statusBar'),
    leftSide: makeNodeComponent('leftSide'),
    statusBarTime: makeNodeComponent('statusBarTime'),
    time: makeNodeComponent('time'),
    rightSide: makeNodeComponent('rightSide'),
    navigationBar2: makeNodeComponent('navigationBar2'),
    icons5: makeNodeComponent('icons5'),
    rectangle1434: makeNodeComponent('rectangle1434'),
    icons6: makeNodeComponent('icons6'),
    avatar14: makeNodeComponent('avatar14'),
    avatar15: makeNodeComponent('avatar15'),
    replacePhotoHere8: makeNodeComponent('replacePhotoHere8'),
    maskGroup: makeNodeComponent('maskGroup'),
    image39: makeNodeComponent('image39'),
    initiativesToggle: makeNodeComponent('initiativesToggle'),
    menu: makeNodeComponent('menu'),
    rectangle1: makeNodeComponent('rectangle1'),
    rectangle2: makeNodeComponent('rectangle2'),

    // Metadata about props expected for PlasmicNewPage2
    internalVariantProps: PlasmicNewPage2__VariantProps,
    internalArgProps: PlasmicNewPage2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: '',
      description: '',
      ogImageSrc: '',
      canonical: '',
    },
  }
);

export default PlasmicNewPage2;
/* prettier-ignore-end */
