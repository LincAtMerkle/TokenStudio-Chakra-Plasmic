// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nV7sRTPBx6ecWzFNNAWeQg
// Component: teyiBam7oH

import * as React from 'react';

import Head from 'next/head';
import Link, { LinkProps } from 'next/link';
import { useRouter } from 'next/router';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import { Heading } from '@chakra-ui/react'; // plasmic-import: 0G7l8BbhtHSG-/codeComponent
import { NavbarWithRightCta } from '../../chakra/chakraPro/Marketing/Navbars/NavbarWithRightCta'; // plasmic-import: 6mxRRiiJfxab/codeComponent
import { MobileNavbarWithSimpleDropdown } from '../../chakra/chakraPro/Marketing/Navbars/MobileNavbarWithSimpleDropdown'; // plasmic-import: 0iv0Wk3n1lcb/codeComponent
import { NavbarWithFullWidthSubmenu } from '../../chakra/chakraPro/Marketing/Navbars/NavbarWithFullWidthSubmenu'; // plasmic-import: O8twjA_h_Uni/codeComponent
import { NavbarWithTabs } from '../../chakra/chakraPro/Marketing/Navbars/NavbarWithTabs'; // plasmic-import: KtCAw8D0Mt_T/codeComponent
import { NavbarWithSubmenu } from '../../chakra/chakraPro/Marketing/Navbars/NavbarWithSubmenu'; // plasmic-import: O2zEHwuJambG/codeComponent
import { NavbarWithFullButton } from '../../chakra/chakraPro/Marketing/Navbars/NavbarWithFullButton'; // plasmic-import: oER7_ExtmlSc/codeComponent

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_plasmic_poc_localhost.module.css'; // plasmic-import: nV7sRTPBx6ecWzFNNAWeQg/projectcss
import sty from './PlasmicNavbars2.module.css'; // plasmic-import: teyiBam7oH/css

export type PlasmicNavbars2__VariantMembers = {};
export type PlasmicNavbars2__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavbars2__VariantsArgs;
export const PlasmicNavbars2__VariantProps = new Array<VariantPropType>();

export type PlasmicNavbars2__ArgsType = {};
type ArgPropType = keyof PlasmicNavbars2__ArgsType;
export const PlasmicNavbars2__ArgProps = new Array<ArgPropType>();

export type PlasmicNavbars2__OverridesType = {
  root?: p.Flex<'div'>;
  navbarWithRightCta?: p.Flex<typeof NavbarWithRightCta>;
  mobileNavbarWithSimpleDropdown?: p.Flex<
    typeof MobileNavbarWithSimpleDropdown
  >;
  navbarWithFullWidthSubmenu?: p.Flex<typeof NavbarWithFullWidthSubmenu>;
  navbarWithTabs?: p.Flex<typeof NavbarWithTabs>;
  navbarWithSubmenu?: p.Flex<typeof NavbarWithSubmenu>;
  navbarWithFullButton?: p.Flex<typeof NavbarWithFullButton>;
};

export interface DefaultNavbars2Props {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavbars2__RenderFunc(props: {
  variants: PlasmicNavbars2__VariantsArgs;
  args: PlasmicNavbars2__ArgsType;
  overrides: PlasmicNavbars2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={'root'}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading__zTEfQ)}
            noOfLines={1 as const}
            size={'4xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__c8Mdv
              )}
            >
              {'Navbars'}
            </div>
          </Heading>
          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading__zndZi)}
            noOfLines={1 as const}
            size={'xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qJnn0
              )}
            >
              {'Navbar with right cta'}
            </div>
          </Heading>
          <NavbarWithRightCta
            data-plasmic-name={'navbarWithRightCta'}
            data-plasmic-override={overrides.navbarWithRightCta}
            className={classNames('__wab_instance', sty.navbarWithRightCta)}
          />

          <Heading
            className={classNames(
              '__wab_instance',
              sty.chakraUiHeading___66QRd
            )}
            noOfLines={1 as const}
            size={'xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ehhmV
              )}
            >
              {'Mobile nav with accordion'}
            </div>
          </Heading>
          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading__isSx6)}
            noOfLines={1 as const}
            size={'xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__t5M3
              )}
            >
              {'Mobile navbar with simple dropdown'}
            </div>
          </Heading>
          <MobileNavbarWithSimpleDropdown
            data-plasmic-name={'mobileNavbarWithSimpleDropdown'}
            data-plasmic-override={overrides.mobileNavbarWithSimpleDropdown}
            className={classNames(
              '__wab_instance',
              sty.mobileNavbarWithSimpleDropdown
            )}
          />

          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading__vdLx)}
            noOfLines={1 as const}
            size={'xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bYYo
              )}
            >
              {'Navbar with full width submenu'}
            </div>
          </Heading>
          <NavbarWithFullWidthSubmenu
            data-plasmic-name={'navbarWithFullWidthSubmenu'}
            data-plasmic-override={overrides.navbarWithFullWidthSubmenu}
            className={classNames(
              '__wab_instance',
              sty.navbarWithFullWidthSubmenu
            )}
          />

          <Heading
            className={classNames(
              '__wab_instance',
              sty.chakraUiHeading___5JhLk
            )}
            noOfLines={1 as const}
            size={'xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pEjB
              )}
            >
              {'Navbar with tabs'}
            </div>
          </Heading>
          <NavbarWithTabs
            data-plasmic-name={'navbarWithTabs'}
            data-plasmic-override={overrides.navbarWithTabs}
            className={classNames('__wab_instance', sty.navbarWithTabs)}
          />

          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading__erOts)}
            noOfLines={1 as const}
            size={'xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__aIpyY
              )}
            >
              {'Navbar with submenu'}
            </div>
          </Heading>
          <NavbarWithSubmenu
            data-plasmic-name={'navbarWithSubmenu'}
            data-plasmic-override={overrides.navbarWithSubmenu}
            className={classNames('__wab_instance', sty.navbarWithSubmenu)}
          />

          <Heading
            className={classNames('__wab_instance', sty.chakraUiHeading__ivDxe)}
            noOfLines={1 as const}
            size={'xl' as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6W30H
              )}
            >
              {'Navbar with full button'}
            </div>
          </Heading>
          <NavbarWithFullButton
            data-plasmic-name={'navbarWithFullButton'}
            data-plasmic-override={overrides.navbarWithFullButton}
            className={classNames('__wab_instance', sty.navbarWithFullButton)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    'root',
    'navbarWithRightCta',
    'mobileNavbarWithSimpleDropdown',
    'navbarWithFullWidthSubmenu',
    'navbarWithTabs',
    'navbarWithSubmenu',
    'navbarWithFullButton',
  ],
  navbarWithRightCta: ['navbarWithRightCta'],
  mobileNavbarWithSimpleDropdown: ['mobileNavbarWithSimpleDropdown'],
  navbarWithFullWidthSubmenu: ['navbarWithFullWidthSubmenu'],
  navbarWithTabs: ['navbarWithTabs'],
  navbarWithSubmenu: ['navbarWithSubmenu'],
  navbarWithFullButton: ['navbarWithFullButton'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  navbarWithRightCta: typeof NavbarWithRightCta;
  mobileNavbarWithSimpleDropdown: typeof MobileNavbarWithSimpleDropdown;
  navbarWithFullWidthSubmenu: typeof NavbarWithFullWidthSubmenu;
  navbarWithTabs: typeof NavbarWithTabs;
  navbarWithSubmenu: typeof NavbarWithSubmenu;
  navbarWithFullButton: typeof NavbarWithFullButton;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbars2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbars2__VariantsArgs;
    args?: PlasmicNavbars2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbars2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavbars2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavbars2__ArgProps,
          internalVariantPropNames: PlasmicNavbars2__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicNavbars2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicNavbars2';
  } else {
    func.displayName = `PlasmicNavbars2.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbars2 = Object.assign(
  // Top-level PlasmicNavbars2 renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    navbarWithRightCta: makeNodeComponent('navbarWithRightCta'),
    mobileNavbarWithSimpleDropdown: makeNodeComponent(
      'mobileNavbarWithSimpleDropdown'
    ),
    navbarWithFullWidthSubmenu: makeNodeComponent('navbarWithFullWidthSubmenu'),
    navbarWithTabs: makeNodeComponent('navbarWithTabs'),
    navbarWithSubmenu: makeNodeComponent('navbarWithSubmenu'),
    navbarWithFullButton: makeNodeComponent('navbarWithFullButton'),

    // Metadata about props expected for PlasmicNavbars2
    internalVariantProps: PlasmicNavbars2__VariantProps,
    internalArgProps: PlasmicNavbars2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: '',
      description: '',
      ogImageSrc: '',
      canonical: '',
    },
  }
);

export default PlasmicNavbars2;
/* prettier-ignore-end */
