// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nV7sRTPBx6ecWzFNNAWeQg
// Component: cAtTstJSenOpIj

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Heading } from "@chakra-ui/react"; // plasmic-import: 0G7l8BbhtHSG-/codeComponent
import { Text } from "@chakra-ui/react"; // plasmic-import: SdN14ngBJybRru/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_poc_localhost.module.css"; // plasmic-import: nV7sRTPBx6ecWzFNNAWeQg/projectcss
import sty from "./PlasmicText.module.css"; // plasmic-import: cAtTstJSenOpIj/css

export type PlasmicText__VariantMembers = {};
export type PlasmicText__VariantsArgs = {};
type VariantPropType = keyof PlasmicText__VariantsArgs;
export const PlasmicText__VariantProps = new Array<VariantPropType>();

export type PlasmicText__ArgsType = {};
type ArgPropType = keyof PlasmicText__ArgsType;
export const PlasmicText__ArgProps = new Array<ArgPropType>();

export type PlasmicText__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultTextProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicText__RenderFunc(props: {
  variants: PlasmicText__VariantsArgs;
  args: PlasmicText__ArgsType;
  overrides: PlasmicText__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicText.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicText.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicText.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__lu88A)}
            noOfLines={1 as const}
            size={"4xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__k1H1K
              )}
            >
              {"Text"}
            </div>
          </Heading>
          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__e3Iq)}
            noOfLines={1 as const}
            size={"3xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eSobH
              )}
            >
              {"Variants"}
            </div>
          </Heading>
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <Text
                className={classNames(
                  "__wab_instance",
                  sty.chakraUiText___3L65L
                )}
                size={"md" as const}
                variant={"light" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xlNPm
                  )}
                >
                  {"light"}
                </div>
              </Text>
              <Text
                className={classNames(
                  "__wab_instance",
                  sty.chakraUiText__bAf7T
                )}
                size={"md" as const}
                variant={"regular" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cy9Sg
                  )}
                >
                  {"regular"}
                </div>
              </Text>
              <Text
                className={classNames("__wab_instance", sty.chakraUiText__ugOu)}
                size={"md" as const}
                variant={"semiBold" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aDltr
                  )}
                >
                  {"semiBold"}
                </div>
              </Text>
              <Text
                className={classNames(
                  "__wab_instance",
                  sty.chakraUiText__mcJer
                )}
                size={"md" as const}
                variant={"bold" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mq4D
                  )}
                >
                  {"bold"}
                </div>
              </Text>
            </p.Stack>
          ) : null}
          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__uSaRr)}
            noOfLines={1 as const}
            size={"3xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zcZvy
              )}
            >
              {"Sizes"}
            </div>
          </Heading>
          <Text
            className={classNames("__wab_instance", sty.chakraUiText__zKXu)}
            size={"xs" as const}
            variant={"regular" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___3NDO
              )}
            >
              {"Text xs"}
            </div>
          </Text>
          <Text
            className={classNames("__wab_instance", sty.chakraUiText__t0Zwu)}
            size={"sm" as const}
            variant={"regular" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qugQn
              )}
            >
              {"Some sm"}
            </div>
          </Text>
          <Text
            className={classNames("__wab_instance", sty.chakraUiText__lTbko)}
            size={"md" as const}
            variant={"regular" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oVmXq
              )}
            >
              {"Some md"}
            </div>
          </Text>
          <Text
            className={classNames("__wab_instance", sty.chakraUiText___9TeYr)}
            size={"lg" as const}
            variant={"regular" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__k0L2N
              )}
            >
              {"Some lg"}
            </div>
          </Text>
          <Text
            className={classNames("__wab_instance", sty.chakraUiText___5TuLa)}
            size={"xl" as const}
            variant={"regular" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hqLy0
              )}
            >
              {"Some xl"}
            </div>
          </Text>
          <Text
            className={classNames("__wab_instance", sty.chakraUiText__ySh1X)}
            size={"2xl" as const}
            variant={"regular" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9YhEc
              )}
            >
              {"Some 2xl"}
            </div>
          </Text>
          <Text
            className={classNames("__wab_instance", sty.chakraUiText__nIuSz)}
            size={"2xl" as const}
            variant={"regular" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uwSGb
              )}
            >
              {"Some 3xl"}
            </div>
          </Text>
          <Text
            className={classNames("__wab_instance", sty.chakraUiText__kw0Mr)}
            size={"3xl" as const}
            variant={"regular" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1Oxs1
              )}
            >
              {"Some 4xl"}
            </div>
          </Text>
          <Text
            className={classNames("__wab_instance", sty.chakraUiText__sVvxr)}
            size={"3xl" as const}
            variant={"regular" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vyQvX
              )}
            >
              {"Some 5xl"}
            </div>
          </Text>
          <Text
            className={classNames("__wab_instance", sty.chakraUiText__w8Y0)}
            size={"4xl" as const}
            variant={"regular" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6MYGl
              )}
            >
              {"Some 6xl"}
            </div>
          </Text>
          <Text
            className={classNames("__wab_instance", sty.chakraUiText__msMk2)}
            size={"5xl" as const}
            variant={"regular" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___5DlTr
              )}
            >
              {"Some 7xl"}
            </div>
          </Text>
          <Text
            className={classNames("__wab_instance", sty.chakraUiText__zS64V)}
            size={"6xl" as const}
            variant={"regular" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__iDiDa
              )}
            >
              {"Some 8xl"}
            </div>
          </Text>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicText__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicText__VariantsArgs;
    args?: PlasmicText__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicText__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicText__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicText__ArgProps,
          internalVariantPropNames: PlasmicText__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicText__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicText";
  } else {
    func.displayName = `PlasmicText.${nodeName}`;
  }
  return func;
}

export const PlasmicText = Object.assign(
  // Top-level PlasmicText renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicText
    internalVariantProps: PlasmicText__VariantProps,
    internalArgProps: PlasmicText__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Text",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicText;
/* prettier-ignore-end */
