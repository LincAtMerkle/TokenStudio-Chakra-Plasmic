// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nV7sRTPBx6ecWzFNNAWeQg
// Component: 7bXBp4WmDb

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Heading } from "@chakra-ui/react"; // plasmic-import: 0G7l8BbhtHSG-/codeComponent
import { StateWithLabel } from "../../custom/chakraPro/Aplication/Stats/StateWithLabel"; // plasmic-import: qbvteujTZnh/codeComponent
import { StatWithCta } from "../../custom/chakraPro/Aplication/Stats/StatWithCta"; // plasmic-import: A6zM0dbulAQ/codeComponent
import { StatWithLabelAndIndicator } from "../../custom/chakraPro/Aplication/Stats/StatWithLabelAndIndicator"; // plasmic-import: oCZkimd1KegC/codeComponent
import { StatWithProgressBar } from "../../custom/chakraPro/Aplication/Stats/StatWithProgressBar"; // plasmic-import: enKi7qqZcoKd/codeComponent
import { StatWithIcon } from "../../custom/chakraPro/Aplication/Stats/StatWithIcon"; // plasmic-import: WEK-fJdCbJQ6/codeComponent
import { StatWithDivider } from "../../custom/chakraPro/Aplication/Stats/StatWithDivider"; // plasmic-import: XEYFkyEmGfEG/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_poc_localhost.module.css"; // plasmic-import: nV7sRTPBx6ecWzFNNAWeQg/projectcss
import sty from "./PlasmicStats.module.css"; // plasmic-import: 7bXBp4WmDb/css

export type PlasmicStats__VariantMembers = {};
export type PlasmicStats__VariantsArgs = {};
type VariantPropType = keyof PlasmicStats__VariantsArgs;
export const PlasmicStats__VariantProps = new Array<VariantPropType>();

export type PlasmicStats__ArgsType = {};
type ArgPropType = keyof PlasmicStats__ArgsType;
export const PlasmicStats__ArgProps = new Array<ArgPropType>();

export type PlasmicStats__OverridesType = {
  root?: p.Flex<"div">;
  stateWithLabel?: p.Flex<typeof StateWithLabel>;
  statWithCta?: p.Flex<typeof StatWithCta>;
  statWithLabelAndIndicator?: p.Flex<typeof StatWithLabelAndIndicator>;
  statWithProgressBar?: p.Flex<typeof StatWithProgressBar>;
  statWithIcon?: p.Flex<typeof StatWithIcon>;
  statWithDivider?: p.Flex<typeof StatWithDivider>;
};

export interface DefaultStatsProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicStats__RenderFunc(props: {
  variants: PlasmicStats__VariantsArgs;
  args: PlasmicStats__ArgsType;
  overrides: PlasmicStats__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__sCIrS)}
            noOfLines={1 as const}
            size={"4xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6H76
              )}
            >
              {"Stats"}
            </div>
          </Heading>
          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__e4SmV)}
            noOfLines={1 as const}
            size={"xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nMVg
              )}
            >
              {"State with label"}
            </div>
          </Heading>
          <StateWithLabel
            data-plasmic-name={"stateWithLabel"}
            data-plasmic-override={overrides.stateWithLabel}
            className={classNames("__wab_instance", sty.stateWithLabel)}
          />

          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__b2LMf)}
            noOfLines={1 as const}
            size={"xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___43J0P
              )}
            >
              {"Stat with cta"}
            </div>
            <StatWithCta
              data-plasmic-name={"statWithCta"}
              data-plasmic-override={overrides.statWithCta}
              className={classNames("__wab_instance", sty.statWithCta)}
            />
          </Heading>
          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__qCn48)}
            noOfLines={1 as const}
            size={"xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gMzo9
              )}
            >
              {"Stat with label and indicator"}
            </div>
          </Heading>
          <StatWithLabelAndIndicator
            data-plasmic-name={"statWithLabelAndIndicator"}
            data-plasmic-override={overrides.statWithLabelAndIndicator}
            className={classNames(
              "__wab_instance",
              sty.statWithLabelAndIndicator
            )}
          />

          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__ihJmQ)}
            noOfLines={1 as const}
            size={"xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__j72Vq
              )}
            >
              {"Stat with progress bar"}
            </div>
          </Heading>
          <StatWithProgressBar
            data-plasmic-name={"statWithProgressBar"}
            data-plasmic-override={overrides.statWithProgressBar}
            className={classNames("__wab_instance", sty.statWithProgressBar)}
          />

          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__wn9Qs)}
            noOfLines={1 as const}
            size={"xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nvPDe
              )}
            >
              {"Stat with icon"}
            </div>
          </Heading>
          <StatWithIcon
            data-plasmic-name={"statWithIcon"}
            data-plasmic-override={overrides.statWithIcon}
            className={classNames("__wab_instance", sty.statWithIcon)}
          />

          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__lTdgz)}
            noOfLines={1 as const}
            size={"xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dEVd5
              )}
            >
              {"Stat with divider"}
            </div>
          </Heading>
          <StatWithDivider
            data-plasmic-name={"statWithDivider"}
            data-plasmic-override={overrides.statWithDivider}
            className={classNames("__wab_instance", sty.statWithDivider)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "stateWithLabel",
    "statWithCta",
    "statWithLabelAndIndicator",
    "statWithProgressBar",
    "statWithIcon",
    "statWithDivider"
  ],
  stateWithLabel: ["stateWithLabel"],
  statWithCta: ["statWithCta"],
  statWithLabelAndIndicator: ["statWithLabelAndIndicator"],
  statWithProgressBar: ["statWithProgressBar"],
  statWithIcon: ["statWithIcon"],
  statWithDivider: ["statWithDivider"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  stateWithLabel: typeof StateWithLabel;
  statWithCta: typeof StatWithCta;
  statWithLabelAndIndicator: typeof StatWithLabelAndIndicator;
  statWithProgressBar: typeof StatWithProgressBar;
  statWithIcon: typeof StatWithIcon;
  statWithDivider: typeof StatWithDivider;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStats__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStats__VariantsArgs;
    args?: PlasmicStats__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStats__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicStats__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicStats__ArgProps,
          internalVariantPropNames: PlasmicStats__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStats__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStats";
  } else {
    func.displayName = `PlasmicStats.${nodeName}`;
  }
  return func;
}

export const PlasmicStats = Object.assign(
  // Top-level PlasmicStats renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    stateWithLabel: makeNodeComponent("stateWithLabel"),
    statWithCta: makeNodeComponent("statWithCta"),
    statWithLabelAndIndicator: makeNodeComponent("statWithLabelAndIndicator"),
    statWithProgressBar: makeNodeComponent("statWithProgressBar"),
    statWithIcon: makeNodeComponent("statWithIcon"),
    statWithDivider: makeNodeComponent("statWithDivider"),

    // Metadata about props expected for PlasmicStats
    internalVariantProps: PlasmicStats__VariantProps,
    internalArgProps: PlasmicStats__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicStats;
/* prettier-ignore-end */
