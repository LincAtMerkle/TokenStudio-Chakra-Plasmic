// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nV7sRTPBx6ecWzFNNAWeQg
// Component: PHIh-93q-f

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { LoginWithCentredForm } from "../../custom/chakraPro/Application/Authentication/LoginWithCentredForm"; // plasmic-import: PZuCg-eLQu/codeComponent
import { LoginWithEmailOrProvider } from "../../custom/chakraPro/Application/Authentication/LoginWithEmailOrProvider"; // plasmic-import: PtPeV_aiJw/codeComponent
import { SignUpWithQuote } from "../../custom/chakraPro/Application/Authentication/SignUpWithQuote"; // plasmic-import: Wq3c7muJU-q/codeComponent
import { SignUpForm } from "../../custom/chakraPro/Application/Authentication/SignUpForm"; // plasmic-import: Ut7HbuGN0AN/codeComponent
import { LoginWithFloatingLabel } from "../../custom/chakraPro/Application/Authentication/LoginWithFloatingLabel"; // plasmic-import: hxuXRIRNvu/codeComponent
import { LoginWithGoogleOrEmail } from "../../custom/chakraPro/Application/Authentication/LoginWithGoogleOrEmail"; // plasmic-import: o9rnxGtWcA/codeComponent
import { LoginWithEmailPasswordOrGoogle } from "../../custom/chakraPro/Application/Authentication/LoginWithEmailPasswordOrGoogle"; // plasmic-import: 9KUsxtSBku/codeComponent
import { LoginWithGradient } from "../../custom/chakraPro/Application/Authentication/LoginWithGradient"; // plasmic-import: wFP8hImPN7r/codeComponent
import { LoginWithFlushedInputs } from "../../custom/chakraPro/Application/Authentication/LoginWithFlushedInputs"; // plasmic-import: 6KdYDcBDm6/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_poc_localhost.module.css"; // plasmic-import: nV7sRTPBx6ecWzFNNAWeQg/projectcss
import sty from "./PlasmicAuthentication.module.css"; // plasmic-import: PHIh-93q-f/css

export type PlasmicAuthentication__VariantMembers = {};
export type PlasmicAuthentication__VariantsArgs = {};
type VariantPropType = keyof PlasmicAuthentication__VariantsArgs;
export const PlasmicAuthentication__VariantProps = new Array<VariantPropType>();

export type PlasmicAuthentication__ArgsType = {};
type ArgPropType = keyof PlasmicAuthentication__ArgsType;
export const PlasmicAuthentication__ArgProps = new Array<ArgPropType>();

export type PlasmicAuthentication__OverridesType = {
  root?: p.Flex<"div">;
  loginWithCentredForm?: p.Flex<typeof LoginWithCentredForm>;
  loginWithEmailOrProvider?: p.Flex<typeof LoginWithEmailOrProvider>;
  signUpWithQuote?: p.Flex<typeof SignUpWithQuote>;
  signUpForm?: p.Flex<typeof SignUpForm>;
  loginWithFloatingLabel?: p.Flex<typeof LoginWithFloatingLabel>;
  loginWithGoogleOrEmail?: p.Flex<typeof LoginWithGoogleOrEmail>;
  loginWithEmailPasswordOrGoogle?: p.Flex<
    typeof LoginWithEmailPasswordOrGoogle
  >;
  loginWithGradient?: p.Flex<typeof LoginWithGradient>;
  loginWithFlushedInputs?: p.Flex<typeof LoginWithFlushedInputs>;
  section?: p.Flex<"section">;
  text?: p.Flex<"div">;
};

export interface DefaultAuthenticationProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAuthentication__RenderFunc(props: {
  variants: PlasmicAuthentication__VariantsArgs;
  args: PlasmicAuthentication__ArgsType;
  overrides: PlasmicAuthentication__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <LoginWithCentredForm
            data-plasmic-name={"loginWithCentredForm"}
            data-plasmic-override={overrides.loginWithCentredForm}
            className={classNames("__wab_instance", sty.loginWithCentredForm)}
          />

          <LoginWithEmailOrProvider
            data-plasmic-name={"loginWithEmailOrProvider"}
            data-plasmic-override={overrides.loginWithEmailOrProvider}
            className={classNames(
              "__wab_instance",
              sty.loginWithEmailOrProvider
            )}
          />

          <SignUpWithQuote
            data-plasmic-name={"signUpWithQuote"}
            data-plasmic-override={overrides.signUpWithQuote}
            className={classNames("__wab_instance", sty.signUpWithQuote)}
          />

          <SignUpForm
            data-plasmic-name={"signUpForm"}
            data-plasmic-override={overrides.signUpForm}
            className={classNames("__wab_instance", sty.signUpForm)}
          />

          <LoginWithFloatingLabel
            data-plasmic-name={"loginWithFloatingLabel"}
            data-plasmic-override={overrides.loginWithFloatingLabel}
            className={classNames("__wab_instance", sty.loginWithFloatingLabel)}
          />

          <LoginWithGoogleOrEmail
            data-plasmic-name={"loginWithGoogleOrEmail"}
            data-plasmic-override={overrides.loginWithGoogleOrEmail}
            className={classNames("__wab_instance", sty.loginWithGoogleOrEmail)}
          />

          <LoginWithEmailPasswordOrGoogle
            data-plasmic-name={"loginWithEmailPasswordOrGoogle"}
            data-plasmic-override={overrides.loginWithEmailPasswordOrGoogle}
            className={classNames(
              "__wab_instance",
              sty.loginWithEmailPasswordOrGoogle
            )}
          />

          <LoginWithGradient
            data-plasmic-name={"loginWithGradient"}
            data-plasmic-override={overrides.loginWithGradient}
            className={classNames("__wab_instance", sty.loginWithGradient)}
          />

          <LoginWithFlushedInputs
            data-plasmic-name={"loginWithFlushedInputs"}
            data-plasmic-override={overrides.loginWithFlushedInputs}
            className={classNames("__wab_instance", sty.loginWithFlushedInputs)}
          />

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"Login with left background"}
            </div>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "loginWithCentredForm",
    "loginWithEmailOrProvider",
    "signUpWithQuote",
    "signUpForm",
    "loginWithFloatingLabel",
    "loginWithGoogleOrEmail",
    "loginWithEmailPasswordOrGoogle",
    "loginWithGradient",
    "loginWithFlushedInputs",
    "section",
    "text"
  ],
  loginWithCentredForm: ["loginWithCentredForm"],
  loginWithEmailOrProvider: ["loginWithEmailOrProvider"],
  signUpWithQuote: ["signUpWithQuote"],
  signUpForm: ["signUpForm"],
  loginWithFloatingLabel: ["loginWithFloatingLabel"],
  loginWithGoogleOrEmail: ["loginWithGoogleOrEmail"],
  loginWithEmailPasswordOrGoogle: ["loginWithEmailPasswordOrGoogle"],
  loginWithGradient: ["loginWithGradient"],
  loginWithFlushedInputs: ["loginWithFlushedInputs"],
  section: ["section", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  loginWithCentredForm: typeof LoginWithCentredForm;
  loginWithEmailOrProvider: typeof LoginWithEmailOrProvider;
  signUpWithQuote: typeof SignUpWithQuote;
  signUpForm: typeof SignUpForm;
  loginWithFloatingLabel: typeof LoginWithFloatingLabel;
  loginWithGoogleOrEmail: typeof LoginWithGoogleOrEmail;
  loginWithEmailPasswordOrGoogle: typeof LoginWithEmailPasswordOrGoogle;
  loginWithGradient: typeof LoginWithGradient;
  loginWithFlushedInputs: typeof LoginWithFlushedInputs;
  section: "section";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAuthentication__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAuthentication__VariantsArgs;
    args?: PlasmicAuthentication__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAuthentication__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAuthentication__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAuthentication__ArgProps,
          internalVariantPropNames: PlasmicAuthentication__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAuthentication__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAuthentication";
  } else {
    func.displayName = `PlasmicAuthentication.${nodeName}`;
  }
  return func;
}

export const PlasmicAuthentication = Object.assign(
  // Top-level PlasmicAuthentication renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    loginWithCentredForm: makeNodeComponent("loginWithCentredForm"),
    loginWithEmailOrProvider: makeNodeComponent("loginWithEmailOrProvider"),
    signUpWithQuote: makeNodeComponent("signUpWithQuote"),
    signUpForm: makeNodeComponent("signUpForm"),
    loginWithFloatingLabel: makeNodeComponent("loginWithFloatingLabel"),
    loginWithGoogleOrEmail: makeNodeComponent("loginWithGoogleOrEmail"),
    loginWithEmailPasswordOrGoogle: makeNodeComponent(
      "loginWithEmailPasswordOrGoogle"
    ),
    loginWithGradient: makeNodeComponent("loginWithGradient"),
    loginWithFlushedInputs: makeNodeComponent("loginWithFlushedInputs"),
    section: makeNodeComponent("section"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicAuthentication
    internalVariantProps: PlasmicAuthentication__VariantProps,
    internalArgProps: PlasmicAuthentication__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAuthentication;
/* prettier-ignore-end */
