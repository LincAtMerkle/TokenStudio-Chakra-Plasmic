// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x7VZoMTkaRPxy26VUXVkvK
// Component: QyqHsDAu6Z
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { SwatchColor } from "../../custom/tokenSheets/SwatchColor"; // plasmic-import: SEDfm__PT6/codeComponent
import { SwatchSizing } from "../../custom/tokenSheets/SwatchSizing"; // plasmic-import: 3ClLpDBBTb/codeComponent
import { SwatchBorder } from "../../custom/tokenSheets/SwatchBorder"; // plasmic-import: TFbSCT-XAW/codeComponent
import { SwatchOpacity } from "../../custom/tokenSheets/SwatchOpacity"; // plasmic-import: qnNAuLIsMl/codeComponent
import { SwatchSpacing } from "../../custom/tokenSheets/SwatchSpacing"; // plasmic-import: R07mb9wDMa/codeComponent
import { SwatchTypography } from "../../custom/tokenSheets/SwatchTypography"; // plasmic-import: UP37tNwri_-/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_poc.module.css"; // plasmic-import: x7VZoMTkaRPxy26VUXVkvK/projectcss
import sty from "./PlasmicDesignTokenItem.module.css"; // plasmic-import: QyqHsDAu6Z/css

export type PlasmicDesignTokenItem__VariantMembers = {
  colorSwatch: "colorSwatch";
  sizing2: "sizing2";
  borderRadius: "borderRadius";
  spacing2: "spacing2";
  fontFamily: "fontFamily";
  fontWeights: "fontWeights";
  fontSizes: "fontSizes";
  borderWidth: "borderWidth";
  opacity2: "opacity2";
  lineHeights: "lineHeights";
  letterSpacing: "letterSpacing";
  paragraphSpacing: "paragraphSpacing";
  textCase: "textCase";
  textDecoration: "textDecoration";
  assets: "assets";
  dimension: "dimension";
  border2: "border2";
  boxShadow: "boxShadow";
  typography2: "typography2";
  composition: "composition";
};
export type PlasmicDesignTokenItem__VariantsArgs = {
  colorSwatch?: SingleBooleanChoiceArg<"colorSwatch">;
  sizing2?: SingleBooleanChoiceArg<"sizing2">;
  borderRadius?: SingleBooleanChoiceArg<"borderRadius">;
  spacing2?: SingleBooleanChoiceArg<"spacing2">;
  fontFamily?: SingleBooleanChoiceArg<"fontFamily">;
  fontWeights?: SingleBooleanChoiceArg<"fontWeights">;
  fontSizes?: SingleBooleanChoiceArg<"fontSizes">;
  borderWidth?: SingleBooleanChoiceArg<"borderWidth">;
  opacity2?: SingleBooleanChoiceArg<"opacity2">;
  lineHeights?: SingleBooleanChoiceArg<"lineHeights">;
  letterSpacing?: SingleBooleanChoiceArg<"letterSpacing">;
  paragraphSpacing?: SingleBooleanChoiceArg<"paragraphSpacing">;
  textCase?: SingleBooleanChoiceArg<"textCase">;
  textDecoration?: SingleBooleanChoiceArg<"textDecoration">;
  assets?: SingleBooleanChoiceArg<"assets">;
  dimension?: SingleBooleanChoiceArg<"dimension">;
  border2?: SingleBooleanChoiceArg<"border2">;
  boxShadow?: SingleBooleanChoiceArg<"boxShadow">;
  typography2?: SingleBooleanChoiceArg<"typography2">;
  composition?: SingleBooleanChoiceArg<"composition">;
};
type VariantPropType = keyof PlasmicDesignTokenItem__VariantsArgs;
export const PlasmicDesignTokenItem__VariantProps = new Array<VariantPropType>(
  "colorSwatch",
  "sizing2",
  "borderRadius",
  "spacing2",
  "fontFamily",
  "fontWeights",
  "fontSizes",
  "borderWidth",
  "opacity2",
  "lineHeights",
  "letterSpacing",
  "paragraphSpacing",
  "textCase",
  "textDecoration",
  "assets",
  "dimension",
  "border2",
  "boxShadow",
  "typography2",
  "composition"
);

export type PlasmicDesignTokenItem__ArgsType = {
  color?: string;
  border?: string;
  opacity?: string;
  typography?: string;
  sizing?: string;
  spacing?: string;
};
type ArgPropType = keyof PlasmicDesignTokenItem__ArgsType;
export const PlasmicDesignTokenItem__ArgProps = new Array<ArgPropType>(
  "color",
  "border",
  "opacity",
  "typography",
  "sizing",
  "spacing"
);

export type PlasmicDesignTokenItem__OverridesType = {
  root?: p.Flex<"div">;
  tokenName?: p.Flex<"div">;
  textValue?: p.Flex<"div">;
  description?: p.Flex<"div">;
  color?: p.Flex<typeof SwatchColor>;
  sizing?: p.Flex<typeof SwatchSizing>;
  border?: p.Flex<typeof SwatchBorder>;
  opacity?: p.Flex<typeof SwatchOpacity>;
  spacing?: p.Flex<typeof SwatchSpacing>;
  typography?: p.Flex<typeof SwatchTypography>;
};

export interface DefaultDesignTokenItemProps {
  color?: string;
  border?: string;
  opacity?: string;
  typography?: string;
  sizing?: string;
  spacing?: string;
  colorSwatch?: SingleBooleanChoiceArg<"colorSwatch">;
  sizing2?: SingleBooleanChoiceArg<"sizing2">;
  borderRadius?: SingleBooleanChoiceArg<"borderRadius">;
  spacing2?: SingleBooleanChoiceArg<"spacing2">;
  fontFamily?: SingleBooleanChoiceArg<"fontFamily">;
  fontWeights?: SingleBooleanChoiceArg<"fontWeights">;
  fontSizes?: SingleBooleanChoiceArg<"fontSizes">;
  borderWidth?: SingleBooleanChoiceArg<"borderWidth">;
  opacity2?: SingleBooleanChoiceArg<"opacity2">;
  lineHeights?: SingleBooleanChoiceArg<"lineHeights">;
  letterSpacing?: SingleBooleanChoiceArg<"letterSpacing">;
  paragraphSpacing?: SingleBooleanChoiceArg<"paragraphSpacing">;
  textCase?: SingleBooleanChoiceArg<"textCase">;
  textDecoration?: SingleBooleanChoiceArg<"textDecoration">;
  assets?: SingleBooleanChoiceArg<"assets">;
  dimension?: SingleBooleanChoiceArg<"dimension">;
  border2?: SingleBooleanChoiceArg<"border2">;
  boxShadow?: SingleBooleanChoiceArg<"boxShadow">;
  typography2?: SingleBooleanChoiceArg<"typography2">;
  composition?: SingleBooleanChoiceArg<"composition">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicDesignTokenItem__RenderFunc(props: {
  variants: PlasmicDesignTokenItem__VariantsArgs;
  args: PlasmicDesignTokenItem__ArgsType;
  overrides: PlasmicDesignTokenItem__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          border: "1" as const,
          opacity: "0.5" as const,
          typography: "inter" as const,
          sizing: "10" as const,
          spacing: "10" as const
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "colorSwatch",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.colorSwatch
          : undefined
      },
      {
        path: "sizing2",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.sizing2 : undefined
      },
      {
        path: "borderRadius",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.borderRadius
          : undefined
      },
      {
        path: "spacing2",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.spacing2 : undefined
      },
      {
        path: "fontFamily",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.fontFamily : undefined
      },
      {
        path: "fontWeights",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.fontWeights
          : undefined
      },
      {
        path: "fontSizes",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.fontSizes : undefined
      },
      {
        path: "borderWidth",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.borderWidth
          : undefined
      },
      {
        path: "opacity2",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.opacity2 : undefined
      },
      {
        path: "lineHeights",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.lineHeights
          : undefined
      },
      {
        path: "letterSpacing",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.letterSpacing
          : undefined
      },
      {
        path: "paragraphSpacing",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.paragraphSpacing
          : undefined
      },
      {
        path: "textCase",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.textCase : undefined
      },
      {
        path: "textDecoration",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.textDecoration
          : undefined
      },
      {
        path: "assets",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.assets : undefined
      },
      {
        path: "dimension",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.dimension : undefined
      },
      {
        path: "border2",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.border2 : undefined
      },
      {
        path: "boxShadow",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.boxShadow : undefined
      },
      {
        path: "typography2",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.typography2
          : undefined
      },
      {
        path: "composition",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.composition
          : undefined
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootfontFamily]: hasVariant($state, "fontFamily", "fontFamily") }
      )}
    >
      <div
        data-plasmic-name={"tokenName"}
        data-plasmic-override={overrides.tokenName}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.tokenName
        )}
      >
        {"tokenName"}
      </div>

      <div
        data-plasmic-name={"textValue"}
        data-plasmic-override={overrides.textValue}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.textValue
        )}
      >
        {"textValue"}
      </div>

      <div
        data-plasmic-name={"description"}
        data-plasmic-override={overrides.description}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.description
        )}
      >
        {"description"}
      </div>

      {(
        hasVariant($state, "spacing2", "spacing2")
          ? true
          : hasVariant($state, "borderRadius", "borderRadius")
          ? true
          : hasVariant($state, "sizing2", "sizing2")
          ? true
          : hasVariant($state, "colorSwatch", "colorSwatch")
          ? true
          : false
      ) ? (
        <SwatchColor
          data-plasmic-name={"color"}
          data-plasmic-override={overrides.color}
          className={classNames("__wab_instance", sty.color, {
            [sty.colorborderRadius]: hasVariant(
              $state,
              "borderRadius",
              "borderRadius"
            ),
            [sty.colorcolorSwatch]: hasVariant(
              $state,
              "colorSwatch",
              "colorSwatch"
            ),
            [sty.colorfontFamily]: hasVariant(
              $state,
              "fontFamily",
              "fontFamily"
            ),
            [sty.colorsizing2]: hasVariant($state, "sizing2", "sizing2"),
            [sty.colorspacing2]: hasVariant($state, "spacing2", "spacing2")
          })}
          color={args.color}
        />
      ) : null}
      {(
        hasVariant($state, "spacing2", "spacing2")
          ? true
          : hasVariant($state, "borderRadius", "borderRadius")
          ? true
          : hasVariant($state, "sizing2", "sizing2")
          ? true
          : hasVariant($state, "colorSwatch", "colorSwatch")
          ? true
          : false
      ) ? (
        <SwatchSizing
          data-plasmic-name={"sizing"}
          data-plasmic-override={overrides.sizing}
          className={classNames("__wab_instance", sty.sizing, {
            [sty.sizingborderRadius]: hasVariant(
              $state,
              "borderRadius",
              "borderRadius"
            ),
            [sty.sizingcolorSwatch]: hasVariant(
              $state,
              "colorSwatch",
              "colorSwatch"
            ),
            [sty.sizingsizing2]: hasVariant($state, "sizing2", "sizing2"),
            [sty.sizingspacing2]: hasVariant($state, "spacing2", "spacing2")
          })}
          size={args.sizing}
        />
      ) : null}
      {(
        hasVariant($state, "spacing2", "spacing2")
          ? true
          : hasVariant($state, "borderRadius", "borderRadius")
          ? true
          : hasVariant($state, "sizing2", "sizing2")
          ? true
          : hasVariant($state, "border2", "border2")
          ? true
          : hasVariant($state, "colorSwatch", "colorSwatch")
          ? true
          : true
      ) ? (
        <SwatchBorder
          data-plasmic-name={"border"}
          data-plasmic-override={overrides.border}
          border={args.border}
          className={classNames("__wab_instance", sty.border, {
            [sty.borderborder2]: hasVariant($state, "border2", "border2"),
            [sty.borderborderRadius]: hasVariant(
              $state,
              "borderRadius",
              "borderRadius"
            ),
            [sty.bordercolorSwatch]: hasVariant(
              $state,
              "colorSwatch",
              "colorSwatch"
            ),
            [sty.bordersizing2]: hasVariant($state, "sizing2", "sizing2"),
            [sty.borderspacing2]: hasVariant($state, "spacing2", "spacing2"),
            [sty.bordertypography2]: hasVariant(
              $state,
              "typography2",
              "typography2"
            )
          })}
        />
      ) : null}
      {(
        hasVariant($state, "opacity2", "opacity2")
          ? true
          : hasVariant($state, "spacing2", "spacing2")
          ? true
          : hasVariant($state, "borderRadius", "borderRadius")
          ? true
          : hasVariant($state, "sizing2", "sizing2")
          ? true
          : hasVariant($state, "colorSwatch", "colorSwatch")
          ? true
          : true
      ) ? (
        <SwatchOpacity
          data-plasmic-name={"opacity"}
          data-plasmic-override={overrides.opacity}
          className={classNames("__wab_instance", sty.opacity, {
            [sty.opacityborderRadius]: hasVariant(
              $state,
              "borderRadius",
              "borderRadius"
            ),
            [sty.opacitycolorSwatch]: hasVariant(
              $state,
              "colorSwatch",
              "colorSwatch"
            ),
            [sty.opacityopacity2]: hasVariant($state, "opacity2", "opacity2"),
            [sty.opacitysizing2]: hasVariant($state, "sizing2", "sizing2"),
            [sty.opacityspacing2]: hasVariant($state, "spacing2", "spacing2")
          })}
          opacity={args.opacity}
        />
      ) : null}
      {(
        hasVariant($state, "spacing2", "spacing2")
          ? true
          : hasVariant($state, "borderRadius", "borderRadius")
          ? true
          : hasVariant($state, "sizing2", "sizing2")
          ? true
          : hasVariant($state, "colorSwatch", "colorSwatch")
          ? true
          : true
      ) ? (
        <SwatchSpacing
          data-plasmic-name={"spacing"}
          data-plasmic-override={overrides.spacing}
          className={classNames("__wab_instance", sty.spacing, {
            [sty.spacingborderRadius]: hasVariant(
              $state,
              "borderRadius",
              "borderRadius"
            ),
            [sty.spacingcolorSwatch]: hasVariant(
              $state,
              "colorSwatch",
              "colorSwatch"
            ),
            [sty.spacingsizing2]: hasVariant($state, "sizing2", "sizing2"),
            [sty.spacingspacing2]: hasVariant($state, "spacing2", "spacing2")
          })}
          space={args.spacing}
        />
      ) : null}
      {(
        hasVariant($state, "spacing2", "spacing2")
          ? true
          : hasVariant($state, "borderRadius", "borderRadius")
          ? true
          : hasVariant($state, "sizing2", "sizing2")
          ? true
          : hasVariant($state, "typography2", "typography2")
          ? true
          : hasVariant($state, "colorSwatch", "colorSwatch")
          ? true
          : true
      ) ? (
        <SwatchTypography
          data-plasmic-name={"typography"}
          data-plasmic-override={overrides.typography}
          className={classNames("__wab_instance", sty.typography, {
            [sty.typographyborderRadius]: hasVariant(
              $state,
              "borderRadius",
              "borderRadius"
            ),
            [sty.typographycolorSwatch]: hasVariant(
              $state,
              "colorSwatch",
              "colorSwatch"
            ),
            [sty.typographysizing2]: hasVariant($state, "sizing2", "sizing2"),
            [sty.typographyspacing2]: hasVariant(
              $state,
              "spacing2",
              "spacing2"
            ),
            [sty.typographytypography2]: hasVariant(
              $state,
              "typography2",
              "typography2"
            )
          })}
          typography={"16px" as const}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "tokenName",
    "textValue",
    "description",
    "color",
    "sizing",
    "border",
    "opacity",
    "spacing",
    "typography"
  ],
  tokenName: ["tokenName"],
  textValue: ["textValue"],
  description: ["description"],
  color: ["color"],
  sizing: ["sizing"],
  border: ["border"],
  opacity: ["opacity"],
  spacing: ["spacing"],
  typography: ["typography"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  tokenName: "div";
  textValue: "div";
  description: "div";
  color: typeof SwatchColor;
  sizing: typeof SwatchSizing;
  border: typeof SwatchBorder;
  opacity: typeof SwatchOpacity;
  spacing: typeof SwatchSpacing;
  typography: typeof SwatchTypography;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDesignTokenItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDesignTokenItem__VariantsArgs;
    args?: PlasmicDesignTokenItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDesignTokenItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDesignTokenItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDesignTokenItem__ArgProps,
          internalVariantPropNames: PlasmicDesignTokenItem__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicDesignTokenItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDesignTokenItem";
  } else {
    func.displayName = `PlasmicDesignTokenItem.${nodeName}`;
  }
  return func;
}

export const PlasmicDesignTokenItem = Object.assign(
  // Top-level PlasmicDesignTokenItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tokenName: makeNodeComponent("tokenName"),
    textValue: makeNodeComponent("textValue"),
    description: makeNodeComponent("description"),
    color: makeNodeComponent("color"),
    sizing: makeNodeComponent("sizing"),
    border: makeNodeComponent("border"),
    opacity: makeNodeComponent("opacity"),
    spacing: makeNodeComponent("spacing"),
    typography: makeNodeComponent("typography"),

    // Metadata about props expected for PlasmicDesignTokenItem
    internalVariantProps: PlasmicDesignTokenItem__VariantProps,
    internalArgProps: PlasmicDesignTokenItem__ArgProps
  }
);

export default PlasmicDesignTokenItem;
/* prettier-ignore-end */
