// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x7VZoMTkaRPxy26VUXVkvK
// Component: XPN2REkT4O

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Heading } from "@chakra-ui/react"; // plasmic-import: STXKiV1w_j5/codeComponent
import { ChakraDocs } from "../../custom/tokenSheets/ChakraDocs"; // plasmic-import: -RU2ZbsAIK/codeComponent
import { Button } from "@chakra-ui/react"; // plasmic-import: QLxDRPfRLT0/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_poc.module.css"; // plasmic-import: x7VZoMTkaRPxy26VUXVkvK/projectcss
import sty from "./PlasmicNewPage2.module.css"; // plasmic-import: XPN2REkT4O/css

export type PlasmicNewPage2__VariantMembers = {};
export type PlasmicNewPage2__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage2__VariantsArgs;
export const PlasmicNewPage2__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage2__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage2__ArgsType;
export const PlasmicNewPage2__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage2__OverridesType = {
  root?: p.Flex<"div">;
  chakraDocs?: p.Flex<typeof ChakraDocs>;
};

export interface DefaultNewPage2Props {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewPage2__RenderFunc(props: {
  variants: PlasmicNewPage2__VariantsArgs;
  args: PlasmicNewPage2__ArgsType;
  overrides: PlasmicNewPage2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__qdgB3)}
            noOfLines={1 as const}
            size={"4xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__f8Bnk
              )}
            >
              {"Color"}
            </div>
            <ChakraDocs
              data-plasmic-name={"chakraDocs"}
              data-plasmic-override={overrides.chakraDocs}
              className={classNames("__wab_instance", sty.chakraDocs)}
              path={"btn.primary1.default" as const}
              set={"core/color" as const}
              theme={"light" as const}
            />
          </Heading>
          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__wyizB)}
            noOfLines={1 as const}
            size={"4xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___8NyYi
              )}
            >
              {"Button"}
            </div>
          </Heading>
          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__vsPEu)}
            noOfLines={1 as const}
            size={"xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uesyh
              )}
            >
              {"Sizes"}
            </div>
          </Heading>
          <Button
            className={classNames("__wab_instance", sty.chakraUiButton___5F0Aq)}
            size={"xl" as const}
            variant={"primary1" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__beu1W
              )}
            >
              {"Button"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.chakraUiButton__s4NNn)}
            size={"sm" as const}
            variant={"primary1" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jn6Sx
              )}
            >
              {"Button"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.chakraUiButton__d1Ujy)}
            size={"md" as const}
            variant={"primary1" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sfLdb
              )}
            >
              {"Button"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.chakraUiButton__vsfq)}
            size={"lg" as const}
            variant={"primary1" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gpmu6
              )}
            >
              {"Button"}
            </div>
          </Button>
          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__cXh5D)}
            noOfLines={1 as const}
            size={"xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9Pmob
              )}
            >
              {"States"}
            </div>
          </Heading>
          <Button
            className={classNames("__wab_instance", sty.chakraUiButton__hBm5)}
            isActive={true}
            size={"md" as const}
            variant={"primary1" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___92BpH
              )}
            >
              {"Button"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.chakraUiButton__pjMhl)}
            isDisabled={true}
            size={"md" as const}
            variant={"primary1" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yo4Bb
              )}
            >
              {"Button"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.chakraUiButton__eH7Mk)}
            isLoading={true}
            size={"md" as const}
            variant={"primary1" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eWsI1
              )}
            >
              {"Button"}
            </div>
          </Button>
          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__dqITz)}
            noOfLines={1 as const}
            size={"xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__luMsH
              )}
            >
              {"Icons"}
            </div>
          </Heading>
          <Button
            className={classNames("__wab_instance", sty.chakraUiButton__bfEkq)}
            isActive={true}
            size={"md" as const}
            variant={"primary1" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___7Dsoq
              )}
            >
              {"Button"}
            </div>
          </Button>
          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__qal2U)}
            noOfLines={1 as const}
            size={"xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__emBx9
              )}
            >
              {"Variants"}
            </div>
          </Heading>
          <Button
            className={classNames("__wab_instance", sty.chakraUiButton__z27Qc)}
            variant={"primary1" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__w2DRm
              )}
            >
              {"Button"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.chakraUiButton__r8V9J)}
            variant={"primary2" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eNy0E
              )}
            >
              {"Button"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.chakraUiButton__jhJlq)}
            variant={"secondary1" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ltErc
              )}
            >
              {"Button"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.chakraUiButton__ageLr)}
            colorScheme={"red" as const}
            variant={"secondary2" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ocR2F
              )}
            >
              {"Button"}
            </div>
          </Button>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "chakraDocs"],
  chakraDocs: ["chakraDocs"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  chakraDocs: typeof ChakraDocs;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage2__VariantsArgs;
    args?: PlasmicNewPage2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewPage2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNewPage2__ArgProps,
          internalVariantPropNames: PlasmicNewPage2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewPage2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage2";
  } else {
    func.displayName = `PlasmicNewPage2.${nodeName}`;
  }
  return func;
}

export const PlasmicNewPage2 = Object.assign(
  // Top-level PlasmicNewPage2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    chakraDocs: makeNodeComponent("chakraDocs"),

    // Metadata about props expected for PlasmicNewPage2
    internalVariantProps: PlasmicNewPage2__VariantProps,
    internalArgProps: PlasmicNewPage2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewPage2;
/* prettier-ignore-end */
