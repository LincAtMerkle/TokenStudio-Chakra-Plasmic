// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x7VZoMTkaRPxy26VUXVkvK
// Component: xq29wAEBU6Yg

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Heading } from "@chakra-ui/react"; // plasmic-import: STXKiV1w_j5/codeComponent
import { Text } from "@chakra-ui/react"; // plasmic-import: taGcKHa0o_P/codeComponent
import { Button } from "@chakra-ui/react"; // plasmic-import: QLxDRPfRLT0/codeComponent
import { Switch } from "@chakra-ui/react"; // plasmic-import: lHMqEaS68Dp/codeComponent
import { Accordion } from "@chakra-ui/react"; // plasmic-import: HYtD0jZptn/codeComponent
import { AccordionItem } from "@chakra-ui/react"; // plasmic-import: JHgMVOX3uL/codeComponent
import { AccordionButton } from "@chakra-ui/react"; // plasmic-import: rxsy8-uL83/codeComponent
import { AccordionIcon } from "@chakra-ui/react"; // plasmic-import: x-Sixkcwcw/codeComponent
import { AccordionPanel } from "@chakra-ui/react"; // plasmic-import: wqaUFonL4e/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_poc.module.css"; // plasmic-import: x7VZoMTkaRPxy26VUXVkvK/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: xq29wAEBU6Yg/css

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  section?: p.Flex<"section">;
  chakraUiButton?: p.Flex<typeof Button>;
  chakraUiSwitch?: p.Flex<typeof Switch>;
  chakraUiAccordion?: p.Flex<typeof Accordion>;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"section"}
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            hasGap={true}
            className={classNames(projectcss.all, sty.section)}
          >
            <Heading
              className={classNames(
                "__wab_instance",
                sty.chakraUiHeading___1FeIz
              )}
              noOfLines={1 as const}
              size={"4xl" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1C9Xz
                )}
              >
                {"Focus "}
              </div>
            </Heading>
            <Heading
              className={classNames(
                "__wab_instance",
                sty.chakraUiHeading__fYyn4
              )}
              noOfLines={1 as const}
              size={"xl" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__e6MVa
                )}
              >
                {"React code based design system"}
              </div>
            </Heading>
            <Text
              className={classNames("__wab_instance", sty.chakraUiText__u6BeP)}
              size={"md" as const}
              variant={"regular" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___08WPw
                )}
              >
                {
                  "A React code based design system is a collection of reusable components built using React.js that provides a set of guidelines, standards, and best practices for designing and developing consistent, scalable, and responsive user interfaces. These systems are created to enhance the UI development process, reduce development time, and ensure cross-team collaboration, by providing a set of pre-defined components that can be utilized across multiple projects. These components, such as buttons, forms, and menus, follow a consistent design language, and are built to be flexible, customizable, and easily integrated into any React-based application. Overall, React code based design systems offer a more efficient and streamlined approach to UI development, resulting in a more consistent and user-friendly experience for end-users."
                }
              </div>
            </Text>
            <Button
              data-plasmic-name={"chakraUiButton"}
              data-plasmic-override={overrides.chakraUiButton}
              className={classNames("__wab_instance", sty.chakraUiButton)}
              size={"md" as const}
              variant={"primary" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kxS0H
                )}
              >
                {"Button"}
              </div>
            </Button>
            <Heading
              className={classNames(
                "__wab_instance",
                sty.chakraUiHeading__trDt
              )}
              noOfLines={1 as const}
              size={"xl" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wslkp
                )}
              >
                {
                  "Basic text writing, including headings, body text, lists, and more."
                }
              </div>
            </Heading>
            <Text
              className={classNames("__wab_instance", sty.chakraUiText__yrhlk)}
              size={"md" as const}
              variant={"regular" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nG4Qs
                )}
              >
                {"Some Text"}
              </div>
            </Text>
            <Switch
              data-plasmic-name={"chakraUiSwitch"}
              data-plasmic-override={overrides.chakraUiSwitch}
              className={classNames("__wab_instance", sty.chakraUiSwitch)}
              colorScheme={"red" as const}
              isChecked={true}
              size={"md" as const}
              spacing={"0.5rem" as const}
            />

            <Accordion
              data-plasmic-name={"chakraUiAccordion"}
              data-plasmic-override={overrides.chakraUiAccordion}
              className={classNames("__wab_instance", sty.chakraUiAccordion)}
            >
              <AccordionItem
                className={classNames(
                  "__wab_instance",
                  sty.chakraUiAccordionItem__scma6
                )}
              >
                <AccordionButton
                  className={classNames(
                    "__wab_instance",
                    sty.chakraUiAccordionButton__lpj03
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xU9Zg
                    )}
                  >
                    {"Section 1 title"}
                  </div>
                  <AccordionIcon
                    className={classNames(
                      "__wab_instance",
                      sty.chakraUiAccordionIcon___2HHHt
                    )}
                  />
                </AccordionButton>
                <AccordionPanel
                  className={classNames(
                    "__wab_instance",
                    sty.chakraUiAccordionPanel__t29SP
                  )}
                >
                  <Text
                    className={classNames(
                      "__wab_instance",
                      sty.chakraUiText__cKe1V
                    )}
                    size={"md" as const}
                    variant={"regular" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mcYl
                      )}
                    >
                      {
                        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
                      }
                    </div>
                  </Text>
                </AccordionPanel>
              </AccordionItem>
              <AccordionItem
                className={classNames(
                  "__wab_instance",
                  sty.chakraUiAccordionItem___1BKhs
                )}
              >
                <AccordionButton
                  className={classNames(
                    "__wab_instance",
                    sty.chakraUiAccordionButton__fj8Re
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hnak2
                    )}
                  >
                    {"Section 1 title"}
                  </div>
                  <AccordionIcon
                    className={classNames(
                      "__wab_instance",
                      sty.chakraUiAccordionIcon__qsawq
                    )}
                  />
                </AccordionButton>
                <AccordionPanel
                  className={classNames(
                    "__wab_instance",
                    sty.chakraUiAccordionPanel__jbEw
                  )}
                >
                  <Text
                    className={classNames(
                      "__wab_instance",
                      sty.chakraUiText___99J1
                    )}
                    size={"md" as const}
                    variant={"regular" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__e8XSp
                      )}
                    >
                      {
                        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
                      }
                    </div>
                  </Text>
                </AccordionPanel>
              </AccordionItem>
            </Accordion>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "chakraUiButton",
    "chakraUiSwitch",
    "chakraUiAccordion"
  ],
  section: ["section", "chakraUiButton", "chakraUiSwitch", "chakraUiAccordion"],
  chakraUiButton: ["chakraUiButton"],
  chakraUiSwitch: ["chakraUiSwitch"],
  chakraUiAccordion: ["chakraUiAccordion"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  chakraUiButton: typeof Button;
  chakraUiSwitch: typeof Switch;
  chakraUiAccordion: typeof Accordion;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    chakraUiButton: makeNodeComponent("chakraUiButton"),
    chakraUiSwitch: makeNodeComponent("chakraUiSwitch"),
    chakraUiAccordion: makeNodeComponent("chakraUiAccordion"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
