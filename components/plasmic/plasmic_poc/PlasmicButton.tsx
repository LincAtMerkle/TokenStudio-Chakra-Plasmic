// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x7VZoMTkaRPxy26VUXVkvK
// Component: j-8daIxf9n

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Heading } from "@chakra-ui/react"; // plasmic-import: STXKiV1w_j5/codeComponent
import { Text } from "@chakra-ui/react"; // plasmic-import: taGcKHa0o_P/codeComponent
import { ButtonPreview } from "../../custom/ButtonPreview"; // plasmic-import: gT3XIuurc5/codeComponent
import { Button } from "@chakra-ui/react"; // plasmic-import: QLxDRPfRLT0/codeComponent
import { ChakraDocs } from "../../custom/tokenSheets/ChakraDocs"; // plasmic-import: -RU2ZbsAIK/codeComponent

import { useScreenVariants as useScreenVariantscivdiBQpYpScy } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: CivdiBQpYpScy/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_poc.module.css"; // plasmic-import: x7VZoMTkaRPxy26VUXVkvK/projectcss
import sty from "./PlasmicButton.module.css"; // plasmic-import: j-8daIxf9n/css

import LeftIconIcon from "./icons/PlasmicIcon__LeftIcon"; // plasmic-import: sjOToUFJK/icon

export type PlasmicButton__VariantMembers = {};
export type PlasmicButton__VariantsArgs = {};
type VariantPropType = keyof PlasmicButton__VariantsArgs;
export const PlasmicButton__VariantProps = new Array<VariantPropType>();

export type PlasmicButton__ArgsType = {};
type ArgPropType = keyof PlasmicButton__ArgsType;
export const PlasmicButton__ArgProps = new Array<ArgPropType>();

export type PlasmicButton__OverridesType = {
  root?: p.Flex<"div">;
  chakraUiText?: p.Flex<typeof Text>;
  button?: p.Flex<"div">;
  children2?: p.Flex<"div">;
  buttonPreview?: p.Flex<typeof ButtonPreview>;
};

export interface DefaultButtonProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicButton__RenderFunc(props: {
  variants: PlasmicButton__VariantsArgs;
  args: PlasmicButton__ArgsType;
  overrides: PlasmicButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantscivdiBQpYpScy()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicButton.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicButton.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicButton.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Heading
            className={classNames(
              "__wab_instance",
              sty.chakraUiHeading___7RFdX
            )}
            noOfLines={1 as const}
            size={"4xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kBjVy
              )}
            >
              {"Button"}
            </div>
          </Heading>

          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__ie5Np)}
            noOfLines={1 as const}
            size={"lg" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cG1Xo
              )}
            >
              {"Chakra UI"}
            </div>
          </Heading>

          <Text
            data-plasmic-name={"chakraUiText"}
            data-plasmic-override={overrides.chakraUiText}
            className={classNames("__wab_instance", sty.chakraUiText)}
            size={"md" as const}
            variant={"regular" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pK1
              )}
            >
              {
                "Chakra UI is a set of modular and accessible UI components that are built using React. The Chakra UI button is one of these components and it provides a sleek and customizable button that can be used in various web applications. It also provides features like loading spinners, icon buttons, and variant styles such as primary, secondary, and tertiary buttons. These buttons are widely used in web development to enhance the user interface and provide a more interactive experience."
              }
            </div>
          </Text>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___9Fj7)}
            >
              <Heading
                className={classNames(
                  "__wab_instance",
                  sty.chakraUiHeading__eezh1
                )}
                noOfLines={1 as const}
                size={"lg" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__z0Ui
                  )}
                >
                  {"Figma"}
                </div>
              </Heading>

              <p.Stack
                as={"div"}
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                hasGap={true}
                className={classNames(projectcss.all, sty.button)}
              >
                <LeftIconIcon
                  className={classNames(projectcss.all, sty.svg__aMcYg)}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"children2"}
                  data-plasmic-override={overrides.children2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.children2
                  )}
                >
                  {"Button"}
                </div>

                {false ? (
                  <LeftIconIcon
                    className={classNames(projectcss.all, sty.svg__yvwbM)}
                    role={"img"}
                  />
                ) : null}
              </p.Stack>
            </p.Stack>
          ) : null}

          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__rNtcN)}
            noOfLines={1 as const}
            size={"2xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ccrUn
              )}
            >
              {"Code Preview"}
            </div>
          </Heading>

          <ButtonPreview
            data-plasmic-name={"buttonPreview"}
            data-plasmic-override={overrides.buttonPreview}
            className={classNames("__wab_instance", sty.buttonPreview)}
          />

          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__pp0Wc)}
            noOfLines={1 as const}
            size={"2xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wbGuU
              )}
            >
              {"Variants"}
            </div>
          </Heading>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns___5FKE)}
            >
              <div className={classNames(projectcss.all, sty.column__iPaGm)}>
                <Button
                  className={classNames(
                    "__wab_instance",
                    sty.chakraUiButton___5KZq
                  )}
                  size={"md" as const}
                  variant={"primary" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yhqyd
                    )}
                  >
                    {"Primary"}
                  </div>
                </Button>
              </div>

              <div className={classNames(projectcss.all, sty.column__t3I6)}>
                <Button
                  className={classNames(
                    "__wab_instance",
                    sty.chakraUiButton__rm3A0
                  )}
                  size={"md" as const}
                  variant={"secondary" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ilSeG
                    )}
                  >
                    {"secondary"}
                  </div>
                </Button>
              </div>

              <div className={classNames(projectcss.all, sty.column__q3Hor)}>
                <Button
                  className={classNames(
                    "__wab_instance",
                    sty.chakraUiButton___9BEaY
                  )}
                  size={"md" as const}
                  variant={"negative" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vko7J
                    )}
                  >
                    {"negative"}
                  </div>
                </Button>
              </div>

              <div className={classNames(projectcss.all, sty.column__kJhzz)}>
                <Button
                  className={classNames(
                    "__wab_instance",
                    sty.chakraUiButton__akMp2
                  )}
                  size={"md" as const}
                  variant={"ghost" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qaetG
                    )}
                  >
                    {"GOST"}
                  </div>
                </Button>
              </div>

              <div className={classNames(projectcss.all, sty.column__dBxWe)}>
                <Button
                  className={classNames(
                    "__wab_instance",
                    sty.chakraUiButton___8N9Hf
                  )}
                  size={"md" as const}
                  variant={"outline" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3TGfN
                    )}
                  >
                    {"OUTLINE"}
                  </div>
                </Button>
              </div>

              <div className={classNames(projectcss.all, sty.column__fhpDa)}>
                <Button
                  className={classNames(
                    "__wab_instance",
                    sty.chakraUiButton__d85AE
                  )}
                  size={"md" as const}
                  variant={"solid" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lpoQj
                    )}
                  >
                    {"SOLID"}
                  </div>
                </Button>
              </div>

              <div className={classNames(projectcss.all, sty.column__eEu6E)}>
                <Button
                  className={classNames(
                    "__wab_instance",
                    sty.chakraUiButton__t9Emt
                  )}
                  size={"md" as const}
                  variant={"link" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__er7Li
                    )}
                  >
                    {"LINK"}
                  </div>
                </Button>
              </div>

              <div className={classNames(projectcss.all, sty.column__obRuF)}>
                <Button
                  className={classNames(
                    "__wab_instance",
                    sty.chakraUiButton__nu6Qo
                  )}
                  size={"md" as const}
                  variant={"unstyled" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gMHsu
                    )}
                  >
                    {"unstyled"}
                  </div>
                </Button>
              </div>
            </p.Stack>
          ) : null}

          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__fYg2I)}
            noOfLines={1 as const}
            size={"2xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___4Cjp8
              )}
            >
              {"Sizes"}
            </div>
          </Heading>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__o6I5Y)}
            >
              <Button
                className={classNames(
                  "__wab_instance",
                  sty.chakraUiButton__miNnz
                )}
                size={"xl" as const}
                variant={"primary" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__i73Xn
                  )}
                >
                  {"Button"}
                </div>
              </Button>

              <Button
                className={classNames(
                  "__wab_instance",
                  sty.chakraUiButton___4Lgk
                )}
                size={"sm" as const}
                variant={"primary" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4Klb
                  )}
                >
                  {"Button"}
                </div>
              </Button>

              <Button
                className={classNames(
                  "__wab_instance",
                  sty.chakraUiButton__kxLKe
                )}
                size={"md" as const}
                variant={"primary" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__axB
                  )}
                >
                  {"Button"}
                </div>
              </Button>

              <Button
                className={classNames(
                  "__wab_instance",
                  sty.chakraUiButton__aRgat
                )}
                size={"lg" as const}
                variant={"primary" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pAod4
                  )}
                >
                  {"Button"}
                </div>
              </Button>
            </p.Stack>
          ) : null}

          <Heading
            className={classNames("__wab_instance", sty.chakraUiHeading__yAzkh)}
            noOfLines={1 as const}
            size={"2xl" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eIamo
              )}
            >
              {"Button Tokens"}
            </div>
          </Heading>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__ajzyf)}
            >
              <div className={classNames(projectcss.all, sty.column__gzqM2)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__lLavR)}
                  >
                    <Heading
                      className={classNames(
                        "__wab_instance",
                        sty.chakraUiHeading__pHf1D
                      )}
                      noOfLines={1 as const}
                      size={"xl" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xNdvb
                        )}
                      >
                        {"All"}
                      </div>
                    </Heading>

                    <ChakraDocs
                      className={classNames(
                        "__wab_instance",
                        sty.chakraDocs__fvYlk
                      )}
                      path={"btn" as const}
                      set={"core/color" as const}
                      theme={"light" as const}
                    />
                  </p.Stack>
                ) : null}
              </div>

              <div className={classNames(projectcss.all, sty.column__mX04)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ed4Mc)}
                  >
                    <Heading
                      className={classNames(
                        "__wab_instance",
                        sty.chakraUiHeading___0XVaL
                      )}
                      noOfLines={1 as const}
                      size={"xl" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vP3Xx
                        )}
                      >
                        {"Primary"}
                      </div>
                    </Heading>

                    <ChakraDocs
                      className={classNames(
                        "__wab_instance",
                        sty.chakraDocs__q6Hc1
                      )}
                      path={"btn.primary.default" as const}
                      set={"core/color" as const}
                      theme={"light" as const}
                    />
                  </p.Stack>
                ) : null}
              </div>

              <div className={classNames(projectcss.all, sty.column__cmX3X)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__llPuK)}
                  >
                    <Heading
                      className={classNames(
                        "__wab_instance",
                        sty.chakraUiHeading__hbHp1
                      )}
                      noOfLines={1 as const}
                      size={"xl" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tcKdd
                        )}
                      >
                        {"Secondary"}
                      </div>
                    </Heading>

                    <ChakraDocs
                      className={classNames(
                        "__wab_instance",
                        sty.chakraDocs__irfu3
                      )}
                      path={"btn.secondary" as const}
                      set={"core/color" as const}
                      theme={"light" as const}
                    />
                  </p.Stack>
                ) : null}
              </div>

              <div className={classNames(projectcss.all, sty.column__ez2S7)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__jfM3Q)}
                  >
                    <Heading
                      className={classNames(
                        "__wab_instance",
                        sty.chakraUiHeading__q3Wb9
                      )}
                      noOfLines={1 as const}
                      size={"xl" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__m6ZuG
                        )}
                      >
                        {"Negative"}
                      </div>
                    </Heading>

                    <ChakraDocs
                      className={classNames(
                        "__wab_instance",
                        sty.chakraDocs___6JRC
                      )}
                      path={"btn.negative" as const}
                      set={"core/color" as const}
                      theme={"light" as const}
                    />
                  </p.Stack>
                ) : null}
              </div>
            </p.Stack>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "chakraUiText", "button", "children2", "buttonPreview"],
  chakraUiText: ["chakraUiText"],
  button: ["button", "children2"],
  children2: ["children2"],
  buttonPreview: ["buttonPreview"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  chakraUiText: typeof Text;
  button: "div";
  children2: "div";
  buttonPreview: typeof ButtonPreview;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButton__VariantsArgs;
    args?: PlasmicButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicButton__ArgProps,
          internalVariantPropNames: PlasmicButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButton";
  } else {
    func.displayName = `PlasmicButton.${nodeName}`;
  }
  return func;
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    chakraUiText: makeNodeComponent("chakraUiText"),
    button: makeNodeComponent("button"),
    children2: makeNodeComponent("children2"),
    buttonPreview: makeNodeComponent("buttonPreview"),

    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Button",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicButton;
/* prettier-ignore-end */
