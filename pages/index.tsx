// This is a skeleton starter React page generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import * as ph from "@plasmicapp/react-web/lib/host";
// import GlobalContextsProvider from "../components/plasmic/plasmic_poc_localhost/PlasmicGlobalContextsProvider";
import { ScreenVariantProvider } from "../components/plasmic/plasmic_poc_localhost/PlasmicGlobalVariant__Screen";
import { PlasmicHomePage } from "../components/plasmic/plasmic_poc_localhost/PlasmicHomePage";
import { useRouter } from "next/router";


import { Button as ChakraButton } from '../src/components/button';
import { Button, DropdownMenu, Heading, Stack } from '@tokens-studio/ui'
import { ChakraBaseProvider } from '@chakra-ui/react'
import { ModifierProvider } from '../src/components/tokensCtx';


function HomePage() {
  // Use PlasmicHomePage to render this component as it was
  // designed in Plasmic, by activating the appropriate variants,
  // attaching the appropriate event handlers, etc.  You
  // can also install whatever React hooks you need here to manage state or
  // fetch data.
  //
  // Props you can pass into PlasmicHomePage are:
  // 1. Variants you want to activate,
  // 2. Contents for slots you want to fill,
  // 3. Overrides for any named node in the component to attach behavior and data,
  // 4. Props to set on the root node.
  //
  // By default, PlasmicHomePage is wrapped by your project's global
  // variant context providers. These wrappers may be moved to
  // Next.js Custom App component
  // (https://nextjs.org/docs/advanced-features/custom-app).

  const [color, setColor] = React.useState('blue');
  const [type, setType] = React.useState('casual');


  const handleColorChange = (ev) => {
    const key = ev.currentTarget.dataset.key;
    setColor(key);
  }

  const handleTypeChange = (ev) => {
    const key = ev.currentTarget.dataset.key;
    setType(key);
  }

  return (
    // <GlobalContextsProvider>
    <ChakraBaseProvider>
      <ph.PageParamsProvider
        params={useRouter()?.query}
        query={useRouter()?.query}
      >
{/* <ChakraBaseProvider>
    <ModifierProvider modifiers={{ color, type }}>
      <Stack direction='column' gap={6} justify='center' align='center'>
        <Stack direction='row' gap={2}>
          <DropdownMenu>
            <DropdownMenu.Trigger asChild>
              <Button variant="secondary" asDropdown size="medium">
                Color {color}
              </Button>
            </DropdownMenu.Trigger>
            <DropdownMenu.Portal>
              <DropdownMenu.Content>
                <DropdownMenu.Item onClick={handleColorChange} data-key='blue'>Blue</DropdownMenu.Item>
                <DropdownMenu.Item onClick={handleColorChange} data-key='green'>Green</DropdownMenu.Item>
                <DropdownMenu.Item onClick={handleColorChange} data-key='purple'>Purple</DropdownMenu.Item>
              </DropdownMenu.Content>
            </DropdownMenu.Portal>
          </DropdownMenu>

          <DropdownMenu>
            <DropdownMenu.Trigger asChild>
              <Button variant="secondary" asDropdown size="medium">
                Type {type}
              </Button>
            </DropdownMenu.Trigger>
            <DropdownMenu.Portal>
              <DropdownMenu.Content>
                <DropdownMenu.Item onClick={handleTypeChange} data-key='business'>Business</DropdownMenu.Item>
                <DropdownMenu.Item onClick={handleTypeChange} data-key='casual'>Casual</DropdownMenu.Item>
              </DropdownMenu.Content>
            </DropdownMenu.Portal>
          </DropdownMenu>
        </Stack>
        <Stack direction='row' justify='center'>
          <div style={{ background: 'beige', display: 'inline-block', padding: '1em' }}>
            <ChakraButton>Click Me </ChakraButton>
          </div>
        </Stack>

        <Heading>
          These buttons are only overwriting the color modifier, but should still be able to be affected by the type modifier
        </Heading>
        <Stack direction='row' gap={6} justify='center'>
          <ModifierProvider modifiers={{ color: 'blue' }}>
            <ChakraButton>Click Me </ChakraButton>
          </ModifierProvider>
          <ModifierProvider modifiers={{ color: 'green' }}>
            <ChakraButton>Click Me </ChakraButton>
          </ModifierProvider>
          <ModifierProvider modifiers={{ color: 'purple' }}>
            <ChakraButton>Click Me </ChakraButton>
          </ModifierProvider>


        </Stack>
      </Stack>


    </ModifierProvider>


  </ChakraBaseProvider> */}


        <PlasmicHomePage />
      </ph.PageParamsProvider>
    {/* </GlobalContextsProvider> */}
    </ChakraBaseProvider>
    
  );
}

export default HomePage;
