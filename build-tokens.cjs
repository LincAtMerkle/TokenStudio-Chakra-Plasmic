const StyleDictionary = require("style-dictionary");
const {
    registerTransforms,
    transforms,
  } = require("@tokens-studio/sd-transforms");

const { promises } = require("node:fs");

registerTransforms(StyleDictionary);

StyleDictionary.registerTransformGroup({
    name: "custom/tokens-studio",
    transforms: [...transforms, "attribute/cti", "name/cti/kebab"],
  });

const tokenFilter = (cat) => (token) => token.attributes.category === cat;

const generateFilesArr = (tokensCategories, theme) => {
    return tokensCategories.map((cat) => ({
      filter: tokenFilter(cat),
      destination: `./src/components/${cat}/tokens/${cat}-${theme.toLowerCase()}.tokens`,
      format: "css/variables",
      options: {
        selector: ":host",
        fileHeader: "autoGeneratedFileHeader",
      },
    }));
  };

async function run() {
    const $themes = JSON.parse(await promises.readFile("./src/tokens/$themes.json"));
    const configs = $themes.map((theme) => ({
        source: Object.entries(theme.selectedTokenSets)
          .filter(([, val]) => val !== "disabled")
          .map(([tokenset]) => `./src/tokens/${tokenset}.json`),
        fileHeader: {
          autoGeneratedFileHeader: () => {
            return [`Do not edit directly, this file was auto-generated`];
          },
        },
        platforms: {
          css: {
            transformGroup: "custom/tokens-studio",
            files: generateFilesArr(
              [
                "dataDisplay/badge",
                "dataDisplay/card",
                "dataDisplay/code",
                "dataDisplay/divider",
                "dataDisplay/kbd",
                "dataDisplay/list",
                "dataDisplay/stat",
                "dataDisplay/table",
                "dataDisplay/tag",

                "disclosure/accordion",
                "disclosure/tabs",
                "disclosure/visuallyHidden",

                "feedback/alert",
                "feedback/circularProgress",
                "feedback/progress",
                "feedback/skeleton",
                "feedback/spinner",
                "feedback/toast",

                "form/button",
                "forms/checkbox",
                "forms/editable",
                "forms/formControl",
                "forms/iconButton",
                "forms/input",
                "forms/numberInput",
                "forms/pinInput",
                "forms/radio",
                "forms/rangeSlider",
                "forms/select",
                "forms/slider",
                "forms/switch",
                "forms/textarea",

                "layout/aspectRatio",
                "layout/box",
                "layout/center",
                "layout/container",
                "layout/flex",
                "layout/grid",
                "layout/simpleGrid",
                "layout/stack",
                "layout/wrap",
                
                "mediaAndIcons/avatar",
                "mediaAndIcons/icon",
                "mediaAndIcons/image",

                "navigation/breadcrumb",
                "navigation/link",
                "navigation/linkOverlay",
                "navigation/skipNav",
                "navigation/stepper",

                "other/closeButton",
                "other/portal",
                "other/showHide",
                "other/transitions",

                "overlay/alertDialog",
                "overlay/drawer",
                "overlay/menu",
                "overlay/modal",
                "overlay/popover",
                "overlay/tooltip",

                "typography/heading",
                "typography/highlight",
                "typography/text",
              ], theme.name),
          },
        },
      }));
    configs.forEach((cfg) => {
        const sd = StyleDictionary.extend(cfg);
        sd.cleanAllPlatforms();
        sd.buildAllPlatforms();
      });
}

run();